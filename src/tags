!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
BUILT_IN_FUNCS	builtins.h	/^void (*BUILT_IN_FUNCS[NUM_BUILTINS])(kgenv*, int, char**);$/;"	v
CWD_BUFFER_SIZE	util.h	34;"	d
HISTORY_SIZE	util.h	37;"	d
LINE_BUFFER_SIZE	util.h	35;"	d
MAX_TOKENS_PER_LINE	util.h	36;"	d
MAX_WILDCARDS	wildcard.h	24;"	d
NUM_BUILTINS	builtins.h	34;"	d
NUM_BUILTINS	builtins.h	36;"	d
O_VERBOSE_EXE	util.h	32;"	d
RD_ALL	redirection.h	/^    RD_ALL,             \/\/ The >&  operator$/;"	e	enum:redirect_opcodes
RD_ALL_APPEND	redirection.h	/^    RD_ALL_APPEND,      \/\/ The >>& operator$/;"	e	enum:redirect_opcodes
RD_NONE	redirection.h	/^    RD_NONE = -1        \/\/ No redirect operator$/;"	e	enum:redirect_opcodes
RD_STDIN	redirection.h	/^    RD_STDIN,           \/\/ The <   operator$/;"	e	enum:redirect_opcodes
RD_STDOUT	redirection.h	/^    RD_STDOUT,          \/\/ The >   operator$/;"	e	enum:redirect_opcodes
RD_STDOUT_APPEND	redirection.h	/^    RD_STDOUT_APPEND,   \/\/ The >>  operator$/;"	e	enum:redirect_opcodes
WILDCARD_CHARS	wildcard.h	25;"	d
_ALIAS_INC	alias.h	17;"	d
_BUILTINS_INC	builtins.h	17;"	d
_GET_PATH_INC	get_path.h	15;"	d
_TYPES_INC	types.h	17;"	d
_UTIL_INC	util.h	17;"	d
_WATCHMAIL_INC	watchmail.h	17;"	d
_WILDCARD_H	wildcard.h	17;"	d
aliasList	types.h	/^typedef struct aliaselement aliasList;$/;"	t	typeref:struct:aliaselement
aliaselement	types.h	/^struct aliaselement {$/;"	s
aliases	types.h	/^    aliasList* aliases;		    	\/\/\/< Alias list pointer$/;"	m	struct:__anon1
bicfunc	types.h	/^typedef void (*bicfunc)(kgenv*, int, char*);$/;"	t
bool	types.h	/^typedef char bool;  \/\/\/< Fake boolean in C++ style$/;"	t
command	types.h	/^    char*  command;		\/\/\/< Command string$/;"	m	struct:histelement
cwd	types.h	/^    char* cwd;	  		        \/\/\/< Current working directory$/;"	m	struct:__anon1
element	get_path.h	/^  char *element;			\/* a dir in the path *\/$/;"	m	struct:pathelement
false	types.h	21;"	d
filename	types.h	/^    char* filename;             \/\/\/< Path to the file being watched$/;"	m	struct:watchmailelement
hist	types.h	/^    histList* hist;		        \/\/\/< History list pointer$/;"	m	struct:__anon1
histList	types.h	/^typedef struct histelement histList;$/;"	t	typeref:struct:histelement
histelement	types.h	/^struct histelement {$/;"	s
homedir	types.h	/^    char* homedir;		        \/\/\/< Home directory path$/;"	m	struct:__anon1
kgenv	types.h	/^} kgenv;$/;"	t	typeref:struct:__anon1
name	types.h	/^    char*  name;		\/\/\/< The name of the alias$/;"	m	struct:aliaselement
next	get_path.h	/^  struct pathelement *next;		\/* pointer to next node *\/$/;"	m	struct:pathelement	typeref:struct:pathelement::pathelement
next	types.h	/^    struct aliaselement* next;	\/\/\/< Pointer to next node$/;"	m	struct:aliaselement	typeref:struct:aliaselement::aliaselement
next	types.h	/^    struct histelement* next;	\/\/\/< Pointer to next node (previous command)$/;"	m	struct:histelement	typeref:struct:histelement::histelement
next	types.h	/^    struct watchmailelement* next; \/\/\/< Pointer to next node$/;"	m	struct:watchmailelement	typeref:struct:watchmailelement::watchmailelement
num	types.h	/^    int	   num;			\/\/\/< Command number$/;"	m	struct:histelement
path	types.h	/^    pathList* path;		        \/\/\/< Path list pointer$/;"	m	struct:__anon1
pathList	types.h	/^typedef struct pathelement pathList;$/;"	t	typeref:struct:pathelement
pathelement	get_path.h	/^struct pathelement$/;"	s
prompt	types.h	/^    char* prompt; 		        \/\/\/< Prompt prefix string$/;"	m	struct:__anon1
pwd	types.h	/^    char* pwd;    		        \/\/\/< Prior working directory$/;"	m	struct:__anon1
pword_entry	types.h	/^    struct passwd *pword_entry;		\/\/\/< Passwd entry info (not needed?)$/;"	m	struct:__anon1	typeref:struct:__anon1::passwd
redirect_opcodes	redirection.h	/^enum redirect_opcodes {$/;"	g
string	types.h	/^    char*  string;		\/\/\/< Command string alias refers to$/;"	m	struct:aliaselement
thread	types.h	/^    pthread_t thread;           \/\/\/< ::thread_t structure for ::watchmail_thread$/;"	m	struct:watchmailelement
true	types.h	22;"	d
uid	types.h	/^    int uid;			        \/\/\/< User ID $/;"	m	struct:__anon1
watchmailList	types.h	/^typedef struct watchmailelement watchmailList;$/;"	t	typeref:struct:watchmailelement
watchmailelement	types.h	/^struct watchmailelement {$/;"	s
watchmails	types.h	/^    watchmailList* watchmails;	    	\/\/\/< Watchmail list pointer$/;"	m	struct:__anon1
