%!PS-Adobe-3.0
%%Title: alias.c, builtins.c, get_path.c, kgsh.c, util.c, wildcard.c, alias.h, builtins.h, get_path.h, types.h
%%For: Kevin Graney
%%Creator: a2ps version 4.13
%%CreationDate: Thu Oct  1 17:10:49 2009
%%BoundingBox: 24 24 588 768
%%DocumentData: Clean7Bit
%%Orientation: Landscape
%%Pages: 23
%%PageOrder: Ascend
%%DocumentMedia: Letter 612 792 0 () ()
%%DocumentNeededResources: font Courier
%%+ font Courier-Bold
%%+ font Courier-BoldOblique
%%+ font Courier-Oblique
%%+ font Helvetica
%%+ font Helvetica-Bold
%%+ font Symbol
%%+ font Times-Bold
%%+ font Times-Roman
%%DocumentProcessColors: Black 
%%DocumentSuppliedResources: procset a2ps-a2ps-hdr
%%+ procset a2ps-black+white-Prolog
%%+ encoding ISO-8859-1Encoding
%%EndComments
/a2psdict 200 dict def
a2psdict begin
%%BeginProlog
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Check PostScript language level.
/languagelevel where {
  pop /gs_languagelevel languagelevel def
} {
  /gs_languagelevel 1 def
} ifelse

% EPSF import as in the Red Book
/BeginInclude {
  /b4_Inc_state save def    		% Save state for cleanup
  /dict_count countdictstack def	% Count objects on dict stack
  /op_count count 1 sub def		% Count objects on operand stack 
  userdict begin
    0 setgray 0 setlinecap
    1 setlinewidth 0 setlinejoin
    10 setmiterlimit [ ] 0 setdash newpath
    gs_languagelevel 1 ne {
      false setstrokeadjust false setoverprint 
    } if
} bind def

/EndInclude {
  count op_count sub { pos } repeat	% Clean up stacks
  countdictstack dict_count sub { end } repeat
  b4_Inc_state restore
} bind def

/BeginEPSF {
  BeginInclude
  /showpage { } def
} bind def

/EndEPSF {
  EndInclude
} bind def

% Page prefeed
/page_prefeed {         % bool -> -
  statusdict /prefeed known {
    statusdict exch /prefeed exch put
  } {
    pop
  } ifelse
} bind def

/deffont {
  findfont exch scalefont def
} bind def

/reencode_font {
  findfont reencode 2 copy definefont pop def
} bind def

% Function c-show (str => -)
% centers text only according to x axis.
/c-show { 
  dup stringwidth pop
  2 div neg 0 rmoveto
  show
} bind def

% Function l-show (str => -)
% prints texts so that it ends at currentpoint
/l-show {
  dup stringwidth pop neg 
  0 
  rmoveto show
} bind def

% center-fit show (str w => -)
% show centered, and scale currentfont so that the width is less than w
/cfshow {
  exch dup stringwidth pop
  % If the title is too big, try to make it smaller
  3 2 roll 2 copy
  gt
  { % if, i.e. too big
    exch div
    currentfont exch scalefont setfont
  } { % ifelse
    pop pop 
  }
  ifelse
  c-show			% center title
} bind def

% Return the y size of the current font
% - => fontsize
/currentfontsize {
  currentfont /FontMatrix get 3 get 1000 mul
} bind def

% reencode the font
% <encoding-vector> <fontdict> -> <newfontdict>
/reencode { %def
  dup length 5 add dict begin
    { %forall
      1 index /FID ne 
      { def }{ pop pop } ifelse
    } forall
    /Encoding exch def

    % Use the font's bounding box to determine the ascent, descent,
    % and overall height; don't forget that these values have to be
    % transformed using the font's matrix.
    % We use `load' because sometimes BBox is executable, sometimes not.
    % Since we need 4 numbers an not an array avoid BBox from being executed
    /FontBBox load aload pop
    FontMatrix transform /Ascent exch def pop
    FontMatrix transform /Descent exch def pop
    /FontHeight Ascent Descent sub def

    % Define these in case they're not in the FontInfo (also, here
    % they're easier to get to.
    /UnderlinePosition 1 def
    /UnderlineThickness 1 def
    
    % Get the underline position and thickness if they're defined.
    currentdict /FontInfo known {
      FontInfo
      
      dup /UnderlinePosition known {
	dup /UnderlinePosition get
	0 exch FontMatrix transform exch pop
	/UnderlinePosition exch def
      } if
      
      dup /UnderlineThickness known {
	/UnderlineThickness get
	0 exch FontMatrix transform exch pop
	/UnderlineThickness exch def
      } if
      
    } if
    currentdict 
  end 
} bind def

% Function print line number (<string> # -)
/# {
  gsave
    sx cw mul neg 2 div 0 rmoveto
    f# setfont
    c-show
  grestore
} bind def

% -------- Some routines to enlight plain b/w printings ---------

% Underline
% width --
/dounderline {
  currentpoint
  gsave
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    0 rlineto
    stroke
  grestore
} bind def

% Underline a string
% string --
/dounderlinestring {
  stringwidth pop
  dounderline
} bind def

/UL {
  /ul exch store
} bind def

% Draw a box of WIDTH wrt current font
% width --
/dobox {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    stroke
  grestore
} bind def

/BX {
  /bx exch store
} bind def

% Box a string
% string --
/doboxstring {
  stringwidth pop
  dobox
} bind def

%
% ------------- Color routines ---------------
%
/FG /setrgbcolor load def

% Draw the background
% width --
/dobackground {
  currentpoint
  gsave
    newpath
    moveto
    0 currentfont /Descent get currentfontsize mul rmoveto
    dup 0 rlineto
    0 currentfont /FontHeight get currentfontsize mul rlineto
    neg 0 rlineto
    closepath
    bgcolor aload pop setrgbcolor
    fill
  grestore
} bind def

% Draw bg for a string
% string --
/dobackgroundstring {
  stringwidth pop
  dobackground
} bind def


/BG {
  dup /bg exch store
  { mark 4 1 roll ] /bgcolor exch store } if
} bind def


/Show {
  bg { dup dobackgroundstring } if
  ul { dup dounderlinestring } if
  bx { dup doboxstring } if
  show
} bind def

% Function T(ab), jumps to the n-th tabulation in the current line
/T {
  cw mul x0 add
  bg { dup currentpoint pop sub dobackground } if
  ul { dup currentpoint pop sub dounderline } if
  bx { dup currentpoint pop sub dobox } if
  y0 moveto
} bind def

% Function n: move to the next line
/n {
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

/S {
  Show
} bind def

%%BeginResource: procset a2ps-a2ps-hdr 2.0 2
%%Copyright: (c) 1988, 89, 90, 91, 92, 93 Miguel Santana
%%Copyright: (c) 1995, 96, 97, 98 Akim Demaille, Miguel Santana
% Function title: prints page header.
% <ct> <rt> <lt> are passed as argument
/title { 
  % 1. Draw the background
  x v get y v get moveto
  gsave
    0 th 2 div neg rmoveto 
    th setlinewidth
    0.95 setgray
    pw 0 rlineto stroke
  grestore
  % 2. Border it
  gsave
    0.7 setlinewidth
    pw 0 rlineto
    0 th neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
  % stk: ct rt lt
  x v get y v get th sub 1 add moveto
%%IncludeResource: font Helvetica
  fHelvetica fnfs 0.8 mul scalefont setfont
  % 3. The left title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    fnfs 0.8 mul hm rmoveto
    show			% left title
  grestore
  exch
  % stk: ct ltw rt
  % 4. the right title
  gsave
    dup stringwidth pop fnfs 0.8 mul add exch % leave space took on stack
    dup
    pw exch stringwidth pop fnfs 0.8 mul add sub
    hm
    rmoveto
    show			% right title
  grestore
  % stk: ct ltw rtw
  % 5. the center title
  gsave
    pw 3 1 roll
    % stk: ct pw ltw rtw
    3 copy 
    % Move to the center of the left room
    sub add 2 div hm rmoveto
    % What is the available space in here?
    add sub fnfs 0.8 mul sub fnfs 0.8 mul sub
    % stk: ct space_left
%%IncludeResource: font Helvetica-Bold
  fHelvetica-Bold fnfs scalefont setfont
    cfshow
  grestore
} bind def

% Function border: prints virtual page border
/border { %def
  gsave				% print four sides
    0 setgray
    x v get y v get moveto
    0.7 setlinewidth		% of the square
    pw 0 rlineto
    0 ph neg rlineto
    pw neg 0 rlineto
    closepath stroke
  grestore
} bind def

% Function water: prints a water mark in background
/water { %def
  gsave
    scx scy moveto rotate
%%IncludeResource: font Times-Bold
  fTimes-Bold 100 scalefont setfont
    .97 setgray
    dup stringwidth pop 2 div neg -50 rmoveto
    show
  grestore
} bind def

% Function rhead: prints the right header
/rhead {  %def
  lx ly moveto
  fHelvetica fnfs 0.8 mul scalefont setfont
  l-show
} bind def

% Function footer (cf rf lf -> -)
/footer {
  fHelvetica fnfs 0.8 mul scalefont setfont
  dx dy moveto
  show

  snx sny moveto
  l-show
  
  fnx fny moveto
  c-show
} bind def
%%EndResource
%%BeginResource: procset a2ps-black+white-Prolog 2.0 1

% Function T(ab), jumps to the n-th tabulation in the current line
/T { 
  cw mul x0 add y0 moveto
} bind def

% Function n: move to the next line
/n { %def
  /y0 y0 bfs sub store
  x0 y0 moveto
} bind def

% Function N: show and move to the next line
/N {
  Show
  /y0 y0 bfs sub store
  x0 y0 moveto
}  bind def

/S {
  Show
} bind def

/p {
  false UL
  false BX
  fCourier bfs scalefont setfont
  Show
} bind def

/sy {
  false UL
  false BX
  fSymbol bfs scalefont setfont
  Show
} bind def

/k {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/K {
  false UL
  false BX
  fCourier-Bold bfs scalefont setfont
  Show
} bind def

/c {
  false UL
  false BX
  fCourier-Oblique bfs scalefont setfont
  Show
} bind def

/C {
  false UL
  false BX
  fCourier-BoldOblique bfs scalefont setfont
  Show 
} bind def

/l {
  false UL
  false BX
  fHelvetica bfs scalefont setfont
  Show
} bind def

/L {
  false UL
  false BX
  fHelvetica-Bold bfs scalefont setfont
  Show 
} bind def

/str{
  false UL
  false BX
  fTimes-Roman bfs scalefont setfont
  Show
} bind def

/e{
  false UL
  true BX
  fHelvetica-Bold bfs scalefont setfont
  Show
} bind def

%%EndResource
%%EndProlog
%%BeginSetup
%%IncludeResource: font Courier
%%IncludeResource: font Courier-Oblique
%%IncludeResource: font Courier-Bold
%%IncludeResource: font Times-Roman
%%IncludeResource: font Symbol
%%IncludeResource: font Courier-BoldOblique
%%BeginResource: encoding ISO-8859-1Encoding
/ISO-8859-1Encoding [
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright 
/parenleft /parenright /asterisk /plus /comma /minus /period /slash 
/zero /one /two /three /four /five /six /seven 
/eight /nine /colon /semicolon /less /equal /greater /question 
/at /A /B /C /D /E /F /G 
/H /I /J /K /L /M /N /O 
/P /Q /R /S /T /U /V /W 
/X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore 
/quoteleft /a /b /c /d /e /f /g 
/h /i /j /k /l /m /n /o 
/p /q /r /s /t /u /v /w 
/x /y /z /braceleft /bar /braceright /asciitilde /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef /.notdef 
/space /exclamdown /cent /sterling /currency /yen /brokenbar /section 
/dieresis /copyright /ordfeminine /guillemotleft /logicalnot /hyphen /registered /macron 
/degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /bullet 
/cedilla /onesuperior /ordmasculine /guillemotright /onequarter /onehalf /threequarters /questiondown 
/Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla 
/Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis 
/Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /multiply 
/Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls 
/agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla 
/egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis 
/eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /divide 
/oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis 
] def
%%EndResource
% Initialize page description variables.
/sh 612 def
/sw 792 def
/llx 24 def
/urx 768 def
/ury 588 def
/lly 24 def
/#copies 1 def
/th 15.000000 def
/fnfs 11 def
/bfs 7.493857 def
/cw 4.496314 def

% Dictionary for ISO-8859-1 support
/iso1dict 8 dict begin
  /fCourier ISO-8859-1Encoding /Courier reencode_font
  /fCourier-Bold ISO-8859-1Encoding /Courier-Bold reencode_font
  /fCourier-BoldOblique ISO-8859-1Encoding /Courier-BoldOblique reencode_font
  /fCourier-Oblique ISO-8859-1Encoding /Courier-Oblique reencode_font
  /fHelvetica ISO-8859-1Encoding /Helvetica reencode_font
  /fHelvetica-Bold ISO-8859-1Encoding /Helvetica-Bold reencode_font
  /fTimes-Bold ISO-8859-1Encoding /Times-Bold reencode_font
  /fTimes-Roman ISO-8859-1Encoding /Times-Roman reencode_font
currentdict end def
/bgcolor [ 0 0 0 ] def
/bg false def
/ul false def
/bx false def
% The font for line numbering
/f# /Helvetica findfont bfs .6 mul scalefont def
/fSymbol /Symbol findfont def
/hm fnfs 0.25 mul def
/pw
   cw 81.400000 mul
def
/ph
   522.321860 th add
def
/pmw urx llx sub pw 2 mul sub 1 div def
/pmh 0 def
/v 0 def
/x [
  0
  dup pmw add pw add
] def
/y [
  pmh ph add 0 mul ph add
  dup
] def
/scx sw 2 div def
/scy sh 2 div def
/snx urx def
/sny lly 2 add def
/dx llx def
/dy sny def
/fnx scx def
/fny dy def
/lx snx def
/ly ury fnfs 0.8 mul sub def
/sx 0 def
/tab 8 def
/x0 0 def
/y0 0 def
%%EndSetup

%%Page: (1-2) 1
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file alias.c) N
( * @brief Definition of alias functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#include) K
( ") p
(alias.h) str
(") p n
(#include) K
( ") p
(util.h) str
(") p n
() N
(/** ) c n
( * @brief Adds an alias to the alias list.) N
( *) N
( * Inserts an alias into the linked list structure that stores aliases) N
( * \(::aliasList\).  A call to detokenize\(\) is made since aliases are stored as) N
( * unparsed commands.  Any existing alias with the same name will be overwritten) N
( * when this function is called.) N
( * ) N
( * @param env           A pointer to the global ::kgenv object.) N
( * @param name          The name of the alias.) N
( * @param cmd_argc      The argument count for the command the alias points to. ) N
( * @param cmd_argv[]    The argument values for the command the alias points to.) N
( */) N
(void) k
( add_alias\(kgenv* env, ) p
(char) k
(* name, ) p
(int) k
( cmd_argc, ) p
(char) k
(* cmd_argv[]\){) p n
() N
(    ) S
(// Allocate space for the new alias) c n
(    aliasList* new_alias = malloc\() p
(sizeof) K
(\(aliasList\)\);) p n
(    ) S
(if) K
(\(new_alias == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Failed to add alias) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    ) S
(// Delete any existing alias with the same name) c n
(    remove_alias\(env, name\);) p n
() N
(    ) S
(// Copy over the alias name) c n
(    new_alias->name = \() p
(char) k
(*\)malloc\(strlen\(name\) + 1\);) p n
(    ) S
(if) K
(\(new_alias->name == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Failed to add alias) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
(    strcpy\(new_alias->name, name\);) N
() N
(    ) S
(// Copy over the argv arrray and reconstruct the command line string so) c n
(    ) p
(// the recursive calls work out correctly when processing the alias.  We're) c n
(    ) p
(// doing some unecessary processing using this method, but the) c n
(    ) p
(// implementation is neater.) c n
(    ) p
(int) k
( line_length = 0;) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i < cmd_argc; i++\){) p n
(        line_length += strlen\(cmd_argv[i]\);) N
(        line_length++;) S 24 T () S
(// For null character) c n
(    }) p n
(    ) N
(    new_alias->string = malloc\(line_length\);) N
(    ) S
(if) K
(\(new_alias->string == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Failed to add alias) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    memcpy\(new_alias->string , *cmd_argv, line_length\);) N
() N
(alias.c) (Page 1/3) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    detokenize\(new_alias->string, line_length\);) p n
() N
(    ) S
(// Add the link to the next node) c n
(    new_alias->next = env->aliases;) p n
(   ) N
() N
(    env->aliases = new_alias;) N
(}) N
() N
() N
() N
(/** ) c n
( * @brief Checks if a command entered is an alias.) N
( * ) N
( * @param env   A pointer to the global ::kgenv object.) N
( * @param name  The name to check.  This should be argv[0] of the command that's) N
( * been entered.  This function does not parse an entire command line.) N
( * ) N
( * @return  If an alias exists with the name, a pointer to the ::aliasList node) N
( * where the alias is stored is returned.  Otherwise NULL is returned if the) N
( * alias does not exist.) N
( */) N
(aliasList* is_alias\(kgenv* env, ) p
(char) k
(* name\){) p n
(    aliasList* a = env->aliases;) N
() N
(    ) S
(while) K
(\(a != ) p
(NULL) K
(\){) p n
() N
(        ) S
(if) K
(\(strcmp\(name, a->name\) == 0\){) p n
(            ) S
(return) K
( a;) p n
(        }) N
() N
(        a = a->next;) N
(    }) N
(    ) S
(return) K
( ) p
(NULL) K
(;) p n
(}) N
() N
(/** ) c n
( * @brief Removes an alias if it exists.) N
( *) N
( * Steps through the alias list \(::aliasList\) stored in the global ::kgenv) N
( * object.  If an alias of the specified name is found, it is removed from the) N
( * list.  No action is taken if an alias with the name is not found.) N
( * ) N
( * @param env   The global ::kgenv environment object.) N
( * @param name  The name of the alias to remove.) N
( *) N
( * @return  True if an alias was removed.  False otherwise.) N
( */) N
(bool remove_alias\(kgenv* env, ) p
(char) k
(* name\){) p n
() N
(    aliasList* a = env->aliases;) N
(    aliasList* prev = ) S
(NULL) K
(;) p n
() N
(    ) S
(while) K
(\(a != ) p
(NULL) K
(\){) p n
() N
(        ) S
(if) K
(\(strcmp\(name, a->name\) == 0\){) p n
() N
(            ) S
(if) K
(\(prev != ) p
(NULL) K
(\){) p n
(                prev->next = a->next;) N
(            } ) S
(else) K
( {) p n
(                env->aliases = a->next;) N
(            }) N
() N
(            free\(a->name\);) N
(            free\(a->string\);) N
(            free\(a\);) N
(            ) S
(return) K
( true;) p n
() N
(        }) N
(alias.c) (Page 2/3) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/alias.c) (1/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 2
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(        prev = a;) N
(        a = a->next;) N
(    }) N
() N
(    ) S
(return) K
( false;) p n
(}) N
(alias.c) (Page 3/3) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/alias.c) (2/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 3
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file builtins.c) N
( * @brief Definitions of builtin functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#include) K
( ") p
(builtins.h) str
(") p n
(#include) K
( ") p
(get_path.h) str
(") p n
(#include) K
( ") p
(alias.h) str
(") p n
(#include) K
( ") p
(wildcard.h) str
(") p n
() N
(#include) K
( <unistd.h>) p n
(#include) K
( <fcntl.h>) p n
(#include) K
( <sys/stat.h>) p n
(#include) K
( <sys/types.h>) p n
() N
(extern) K
( ) p
(int) k
( errno;) p n
() N
(//------------------------------------------------------------------------------) c n
(//-- The following constants define the built-in commands.  The commands are) N
(//-- matched to the function pointers with a one-to-one matching done in order.) N
(//------------------------------------------------------------------------------) N
() p n
(/** ) c n
( * @brief Stores the commands that map to the built-in functions.) N
( *) N
( * These strings are what, if entered as the zeroth argument \(argv[0]\) in a) N
( * command will execute a built-in function.) N
( */) N
(const) K
( ) p
(char) k
(* BUILT_IN_COMMANDS[] = {) p n
(    ") S
(exit) str
(",) p n
(    ") S
(which) str
(",) p n
(    ") S
(where) str
(",) p n
(    ") S
(cd) str
(",) p n
(    ") S
(pwd) str
(",) p n
(    ") S
(list) str
(",) p n
(    ") S
(pid) str
(",) p n
(    ") S
(kill) str
(", ) p n
(    ") S
(prompt) str
(",) p n
(    ") S
(printenv) str
(",) p n
(    ") S
(alias) str
(",) p n
(    ") S
(unalias) str
(", ) p 16 T () S 24 T () S
(// Not a requirement, but easy to add. ) c n
(    ") p
(history) str
(", ) p n
(    ") S
(setenv) str
(",) p n
(    ") S
(lsbuiltins) str
(",) p n
(    ") S
(copy) str
(") p n
(#ifdef) K
( DEBUG) p 16 T () S 24 T () S
(// Various built ins defined for debugging purposes.) c n
() p 8 T (,) N
(    ") S
(_db_tokenizer) str
(",) p n
(    ") S
(_db_kgenv) str
(",) p n
(    ") S
(_db_path) str
(",) p n
(    ") S
(_db_history) str
(",) p n
(    ") S
(_db_wc_contains) str
(",) p n
(    ") S
(_db_wc_expand) str
(") p n
(#endif) K
( ) p
(//DEBUG) c n
(};) p n
() N
() N
(/** ) c n
( * @brief An array of function pointers for built-in commands.) N
(builtins.c) (Page 1/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( ) c n
( * These function pointers map one-to-one in order with the command strings in ) N
( * ::BUILT_IN_COMMANDS.  Each built-in command function has the same prototype.) N
( * Setting the prototypes up in this way allows us to write each built-in as if) N
( * it were a "main" functions of a seperate program with access to the ::kgenv) N
( * structure.  Adding new built-ins is very easy.) N
( * ) N
( * @param env The global ::kgenv structure is the first argument to every ) N
( * built-in command.) N
( * @param argc The second argument is always the argument count of the command ) N
( * being proccessed. ) N
( * @param argv The third argument is always the argument value array of the ) N
( * command being processed.) N
( */) N
(void) k
( \(*BUILT_IN_FUNCS[]\)\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(** argv\) = {) p n
(    bic_exit, ) N
(    bic_which, ) N
(    bic_where, ) N
(    bic_cd,) N
(    bic_pwd, ) N
(    bic_list,) N
(    bic_pid, ) N
(    bic_kill, ) N
(    bic_prompt, ) N
(    bic_printenv, ) N
(    bic_alias,) N
(    bic_unalias,) N
(    bic_history, ) N
(    bic_setenv,) N
(    bic_lsbuiltins,) N
(    bic_copy) N
(#ifdef) K
( DEBUG) p 16 T () S 24 T () S
(// various built ins defined for debugging purposes) c n
(    ) p 8 T (,) N
(    _db_tokenizer,) N
(    _db_kgenv,) N
(    _db_path,) N
(    _db_history,) N
(    _db_wc_contains,) N
(    _db_wc_expand) N
(#endif) K
( ) p
(//DEBUG) c n
(};) p n
() N
() N
(/** ) c n
( * @brief Checks if a command is a built-in command.) N
( * ) N
( * Loops through ::BUILT_IN_COMMANDS comparing the command parameter to each) N
( * string of ::BUILT_IN_COMMANDS.  When a match is found the index plus one is) N
( * returned.) N
( *) N
( * @param command The command to check.) N
( * ) N
( * @return Returns 0 if the command is not built-in, and a positive value that) N
( * is one greather than the index of the function in the built-in definitions) N
( * arrays \(::BUILT_IN_COMMANDS and ::BUILT_IN_FUNCS\) if the command is built-in.) N
( */) N
(short) k
( ) p
(int) k
( is_builtin\() p
(char) k
(* command\){) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i < NUM_BUILTINS; i++\){) p n
() S 8 T () S
(int) k
( result = strcmp\(command, BUILT_IN_COMMANDS[i]\);) p n
() S 8 T () S
(if) K
(\(result == 0\)) p n
() S 8 T (    ) S
(return) K
( i + 1;) p n
(    }) N
(    ) N
(    ) S
(return) K
( 0;) p n
(}) N
() N
(//------------------------------------------------------------------------------) c n
(//-- Definitions of the various built in functions.) N
(//------------------------------------------------------------------------------) N
(builtins.c) (Page 2/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (3/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 4
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/** ) c n
( * @brief Built-in exit command.) N
( *) N
( * Exits with status 0;) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_exit\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    exit\(0\);) N
(}) N
() N
(/** ) c n
( * @brief Built-in which command.) N
( *) N
( * Displays the full path to the executable that will be executed for each) N
( * command that is given as an argument.  The path printed is the first one that) N
( * occurs in the PATH environment variable that contains a file of the correct) N
( * name with execute permissions.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_which\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(if) K
(\(argc == 1\){) p n
(        fprintf\(stderr, ") S
(which: too few arguments\\n) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(// Loop through each argument and display the path) c n
(    ) p
(for) K
(\() p
(int) k
( i = 1; i < argc; i++\){) p n
() N
(        bool found = false;     ) S
(// Becomes true if something is found) c n
() p n
(        ) S
(// Loop through aliases and print them if any exist for this command) c n
(        aliasList* al = env->aliases;) p n
(        ) S
(while) K
(\(al != ) p
(NULL) K
(\){) p n
(            ) S
(if) K
(\(strcmp\(al->name, argv[i]\) == 0\){) p n
(                printf\(") S
(%s:\\t aliased to %s\\n) str
(", al->name, al->string\);) p n
(                found = true;) N
(            }) N
(            al = al->next;) N
(        }) N
() N
(        ) S
(if) K
(\(!found\){) p n
(            ) S
(char) k
(* path = which\(argv[i], env->path\);) p n
(            ) S
(if) K
(\(path != ) p
(NULL) K
(\){) p n
(                printf\(") S
(%s\\n) str
(", path\);) p n
(                free\(path\);) N
(            }) N
(        }) N
(    }) N
(}) N
() N
(/** ) c n
( * @brief Built-in where command.) N
( *) N
( * Same as the which command, but displays all of the possible paths where a) N
( * file of the correct name with executable permissions exist within the PATH) N
( * envrionment variable list of paths.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(builtins.c) (Page 3/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(void) k
( bic_where\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(if) K
(\(argc == 1\){) p n
(        fprintf\(stderr, ") S
(where: Too few arguments.\\n) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(// For loop executed once for each argument) c n
(    ) p
(for) K
(\() p
(int) k
( i = 1; i < argc; i++\){) p n
() S 8 T (pathList* pl = env->path;) N
(        aliasList* al = env->aliases;) N
() N
() S 8 T () S
(char) k
(* cmd = argv[i];) p n
() N
(        ) S
(// Loop through aliases and print them if any exist for this command) c n
(        ) p
(while) K
(\(al != ) p
(NULL) K
(\){) p n
(            ) S
(if) K
(\(strcmp\(al->name, cmd\) == 0\){) p n
(                printf\(") S
(%s:\\t aliased to %s\\n) str
(", al->name, al->string\);) p n
(            }) N
(            al = al->next;) N
(        }) N
() S 8 T () N
() S 8 T () S
(// While loop executed once for each directory in the path) c n
() p 8 T () S
(while) K
(\(pl != ) p
(NULL) K
(\){) p n
() S 8 T (    DIR* dirp = opendir\(pl->element\);) N
() S 8 T (    ) S
(if) K
(\(dirp == ) p
(NULL) K
(\){) p n
() S 8 T () S 16 T (perror\(") S
(Error in where) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (    } ) S
(else) K
( {) p n
() S 8 T () S 16 T () S
(struct) k
( dirent* dp = readdir\(dirp\); ) p
(//TODO: check errno?) c n
() p n
() S 8 T () S 16 T () S
(// While loop executed once for each file in directory) c n
() p 8 T () S 16 T () S
(while) K
(\(dp != ) p
(NULL) K
(\){) p n
() S 8 T () S 16 T (    ) S
(if) K
(\(strcmp\(dp->d_name, cmd\) == 0\){) p n
() S 8 T () S 16 T () S 24 T (printf\(") S
(%s/%s\\n) str
(", pl->element, cmd\);) p n
() S 8 T () S 16 T (    }) N
() S 8 T () S 16 T (    dp = readdir\(dirp\);) N
() S 8 T () S 16 T (}) N
() N
() S 8 T () S 16 T () S
(if) K
(\(closedir\(dirp\) == -1\){) p n
() S 8 T () S 16 T (    perror\(") S
(Error in where) str
("\);) p n
() S 8 T () S 16 T (    ) S
(return) K
(;) p n
() S 8 T () S 16 T (}) N
() S 8 T (    }) N
() S 8 T (    pl = pl->next;) N
() S 8 T (}) N
(    }) N
(}) N
() N
(/** ) c n
( * @brief Built-in cd command.) N
( *) N
( * Changes the current working directory using the chdir library function.  When) N
( * called with no arguments, changes to the user's home directory.  When called) N
( * as "cd -", changes to the previous directory. ) N
( *) N
( * Before switching, the previous directory and the current directory are set in) N
( * the global ::kgenv environment object.  The user's home directory is also) N
( * retrievable from this object.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_cd\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    ) S
(//** Does nothing if executed with more than one argument ) c n
(    ) p
(if) K
(\(argc > 2\){) p n
() S 8 T (fprintf\(stderr, ") S
(cd: Too many arguments.\\n) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(builtins.c) (Page 4/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (4/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 5
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    }) p n
() N
(    ) S
(//** When called with no arguments cd to home directory) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() N
() S 8 T () S
(// Free up the previous directory and set previous to current ) c n
() p 8 T () S
(if) K
(\(env->pwd != ) p
(NULL) K
(\) free\(env->pwd\);) p n
() S 8 T (env->pwd = env->cwd;) N
() N
() S 8 T () S
(// Set the current directory to the home directory) c n
() p 8 T (env->cwd = \() S
(char) k
(*\)malloc\(strlen\(env->homedir\) + 1\);) p n
() S 8 T () S
(if) K
(\(env->cwd == ) p
(NULL) K
(\){) p n
() S 8 T (    perror\(") S
(Error in cd) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() S 8 T (}) N
() S 8 T (strcpy\(env->cwd, env->homedir\);) N
() S 8 T () N
() S 8 T () S
(// Use chdir to change the working directory) c n
() p 8 T () S
(if) K
(\(chdir\(env->cwd\) != 0\) {) p n
() S 8 T (    perror\(") S
(Error in chdir) str
("\);) p n
() S 8 T (}) N
() N
(    } ) N
(    ) N
(    ) S
(else) K
( ) p n
() N
(    ) S
(//** If called as "cd -", cd to the previous directory \(pwd in kgenv\)) c n
(    ) p
(if) K
(\(strcmp\(argv[1], ") p
(-) str
("\) == 0\){) p n
() N
() S 8 T () S
(// Swap the current working directory with the previous working) c n
() p 8 T () S
(// directory) c n
() p 8 T () S
(char) k
(* temp = env->cwd;) p n
() S 8 T (env->cwd = env->pwd;) N
() S 8 T (env->pwd = temp;) N
() N
() S 8 T () S
(// Use chdir to change the working directory) c n
() p 8 T () S
(if) K
(\(chdir\(env->cwd\) != 0\) {) p n
() S 8 T (    perror\(") S
(Error in chdir) str
("\);) p n
() S 8 T (}) N
() N
(    }) N
() N
(    ) S
(else) K n
() p n
(    ) S
(//** Otherwise we have either a relative or absolute path to a directory) c n
(    {) p n
() S 8 T () S
(// Change to the path specified in the argument) c n
() p 8 T () S
(if) K
(\(chdir\(argv[1]\) != 0\){) p n
() S 8 T (    perror\(") S
(Error in chdir) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(// Free up the previous directory and set previous to current ) c n
() p 8 T () S
(if) K
(\(env->pwd != ) p
(NULL) K
(\) free\(env->pwd\);) p n
() S 8 T (env->pwd = env->cwd;) N
() N
() S 8 T () S
(// Set the current working directory string.  Using getcwd allows us to) c n
() p 8 T () S
(// avoid having to resolve an absolute path if the argument is relative.) c n
() p 8 T (env->cwd = getcwd\() S
(NULL) K
(, CWD_BUFFER_SIZE\);) p n
(    }) N
(}) N
() N
(/** ) c n
( * @brief Built-in pwd command.) N
( *) N
( * Prints the current working directory to stdout.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
(builtins.c) (Page 5/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * @param argv[] The argument values for the command entered.) c n
( */) N
(void) k
( bic_pwd\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(// Print the current working directory) c n
(    printf\(") p
(%s\\n) str
(", env->cwd\);) p n
() N
(}) N
() N
(/** ) c n
( * @brief Built-in list command.) N
( *) N
( * Lists files in the directores specified as arguments.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(// TODO: reverse order of printout) N
(void) k
( bic_list\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    DIR* dirp;) S 16 T () S 24 T () S 32 T () S
(// directory pointer) c n
(    bool cwd_mode = false;) p 32 T () S
(// true if passed with no args) c n
() p n
(    ) S
(// If called with no arguments we just add an argument that is the current) c n
(    ) p
(// working directory.) c n
(    ) p
(if) K
(\(argc == 1\){) p 24 T () N
() S 8 T (argc++;) N
() S 8 T (argv[1] = env->cwd;) N
() S 8 T (cwd_mode = true;) N
(    }) N
() N
() N
(    ) S
(// Loop over the argument list and print each directory listing.) c n
(    ) p
(for) K
(\() p
(int) k
( i=1; i < argc; i++\){) p n
() S 8 T () S
(// Only print the directory name if we are processing arguments.) c n
() p 8 T () S
(if) K
(\(!cwd_mode\)) p n
() S 8 T (    printf\(") S
(\\n%s:\\n) str
(", argv[i]\);) p n
() N
() S 8 T (dirp = opendir\(argv[i]\);) N
() S 8 T () S
(if) K
(\(dirp == ) p
(NULL) K
(\){) p n
() S 8 T (    perror\(") S
(Error in list) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() N
() S 8 T (} ) S
(else) K
( {) p n
() N
() S 8 T (    ) S
(// This loop iterates through the directory stream.) c n
() p 8 T (    ) S
(struct) k
( dirent* dp = readdir\(dirp\);) p 48 T () S
(//TODO: check errno?) c n
() p 8 T (    ) S
(while) K
(\(dp != ) p
(NULL) K
(\){) p n
() S 8 T () S 16 T (printf\(") S
(%s\\n) str
(", dp->d_name\);) p n
() S 8 T () S 16 T (dp = readdir\(dirp\);) N
() S 8 T (    }) N
() N
() S 8 T (    ) S
(if) K
(\(closedir\(dirp\) == -1\){) p n
() S 8 T () S 16 T (perror\(") S
(Error in list) str
("\);) p n
() S 8 T () S 16 T () S
(return) K
(;) p n
() S 8 T (    }) N
() S 8 T (}) N
() N
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Built-in pid command.) N
( *) N
( * Prints the process id \(pid\) of the shell.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
(builtins.c) (Page 6/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (5/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (7-8) 6
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * @param argv[] The argument values for the command entered.) c n
( */) N
(void) k
( bic_pid\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    pid_t pid = getpid\(\);) N
(    ) S
(if) K
(\(pid == -1\){) p 24 T () S 32 T () S
(//TODO: check error condition) c n
() p 8 T (perror\(") S
(Error in pid) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    printf\(") S
(%d\\n) str
(", pid\);) p n
(}) N
() N
() N
(/** ) c n
( * @brief Built-in kill command.) N
( * ) N
( * Sends a SIGTERM signal to the pid specified in the arguments.  If a -n is) N
( * passed, the signal number n is passed to the specified process.) N
( *) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_kill\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    ) S
(int) k
( pid;) p 16 T () S 24 T () S 32 T () S
(///< PID of the process to send signal to) c n
(    ) p
(int) k
( signal = SIGTERM;) p 32 T () S
(///< Default signal is SIGTERM) c n
() p n
(    errno = 0;) N
() N
(    ) S
(// Called with no arguments) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() S 8 T (fprintf\(stderr, ") S
(kill: Too few arguments.\\n) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    ) S
(if) K
(\(argc == 2\){) p 24 T () S 32 T () S
(// Called with just a pid) c n
() p n
(    ) S 8 T (pid = atoi\(argv[1]\);) N
() N
() S 8 T () S
(if) K
(\(errno != 0\){) p n
() S 8 T (    perror\(") S
(Error in kill) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() S 8 T (}) N
() N
(    } ) S
(else) K
( ) p
(if) K
(\(argc == 3\){) p 32 T () S
(// Called with a signal specified) c n
() p n
() S 8 T (pid = atoi\(argv[2]\);) N
() S 8 T (signal = atoi\(argv[1] + 1\);) S 40 T () S
(// Add one to remove hyphen) c n
() p n
() S 8 T () S
(if) K
(\(errno != 0\){) p n
() S 8 T (    perror\(") S
(Error in kill) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() S 8 T (}) N
() N
(    } ) S
(else) K
( {) p 16 T () S 24 T () S 32 T () S
(// Called with too many arguments) c n
() p 8 T (fprintf\(stderr, ") S
(kill: Too many arguments.\\n) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) S 8 T () N
() N
(    ) S
(//sigsend\(P_PID, pid, signal\);) c n
(    ) p
(//printf\("Sending code %d to pid %d\\n", signal, pid\);) c n
() p n
(    ) S
(// Send the kill signal) c n
(    ) p
(if) K
(\(kill\(pid, signal\) == -1\){) p n
() S 8 T (perror\(") S
(Error in kill) str
("\);) p n
(    }) N
() N
(}) N
() N
(builtins.c) (Page 7/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(/** ) c n
( * @brief Built-in prompt command.) N
( *) N
( * Changes the prompt prefix to the specified argument.  If no argument is) N
( * passed, prompts the user for a prefix.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_prompt\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    ) S
(char) k
(* new_prompt;) p 24 T () S 32 T () S
(// the new prompt string) c n
() p n
(    ) S
(// Case where we are passed arguments.) c n
(    ) p
(if) K
(\(argc > 1\){) p 24 T () N
() S 8 T (new_prompt = argv[1];) N
() S 8 T (strcpy\(env->prompt, new_prompt\);) N
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    ) S
(// Case where we prompt user for input.) c n
(    printf\(") p
(New prompt prefix: ) str
("\);) p n
(    ) S
(char) k
(* prompt_in = \() p
(char) k
(*\)malloc\(LINE_BUFFER_SIZE\);) p n
(    ) S
(if) K
(\(prompt_in == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error in prompt) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    fgets\(prompt_in, LINE_BUFFER_SIZE, stdin\);) N
() N
(    ) S
(// Need to remove trailing newline from input.) c n
(    ) p
(if) K
(\(prompt_in[strlen\(prompt_in\) - 1] == ') p
(\\n) str
('\){) p n
() S 8 T (prompt_in[strlen\(prompt_in\) - 1] = ') S
(\\0) str
(';) p n
(    }) N
() N
(    ) S
(// Save some heap by re-allocating only what's needed.) c n
(    new_prompt = \() p
(char) k
(*\)malloc\(strlen\(prompt_in\) + 1\);) p n
(    ) S
(if) K
(\(new_prompt == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error in prompt) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    strcpy\(new_prompt, prompt_in\);) N
(    env->prompt = new_prompt;) N
(    free\(prompt_in\);) N
(}) N
() N
() N
(/** ) c n
( * @brief Built-in printenv command.) N
( *) N
( * Prints out a list of environment variables and their values.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_printenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(// Called with no arguments, print entire environment) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() S 8 T () S
(char) k
(** i = environ;) p n
() S 8 T () S
(while) K
(\(*i != ) p
(NULL) K
(\){) p n
() S 8 T (    printf\(") S
(%s\\n) str
(", *i\);) p n
() S 8 T (    i++;) N
() S 8 T (}) N
(    }) N
() N
(builtins.c) (Page 8/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (6/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (9-10) 7
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(// Called with one argument, print the value) c n
(    ) p
(else) K
( ) p
(if) K
(\(argc == 2\){) p n
() S 8 T () S
(char) k
(* value = getenv\(argv[1]\);) p n
() S 8 T () S
(if) K
(\(value != ) p
(NULL) K
(\){) p n
() S 8 T (    printf\(") S
(%s\\n) str
(", value\);) p n
() S 8 T (} ) S
(else) K
( {) p n
() S 8 T (    fprintf\(stderr, ") S
(%s was not found in the current environment\\n) str
(",) p n
() S 8 T () S 16 T (    argv[1]\);) N
() S 8 T (}) N
(    }) N
() N
() N
(    ) S
(// Called with more than one argument) c n
(    ) p
(else) K
( {) p n
() S 8 T (fprintf\(stderr, ") S
(printenv: Too many arguments.\\n) str
("\);) p n
(    }) N
() N
(}) N
() N
() N
(/** ) c n
( * @brief Built-in alias command.) N
( *) N
( * When run with no arguments prints a list of aliases currently in the alias) N
( * list.  When ran with arguments sets the alias name in the first argument to) N
( * the command specified in subsequent arguments.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_alias\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(// If no arguments are passed print the alias list) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() S 8 T (aliasList* a = env->aliases;) N
() S 8 T () S
(while) K
(\(a != ) p
(NULL) K
(\){) p n
() S 8 T (    ) S
(//TODO: update to print entire argv array) c n
() p 8 T (    printf\(") S
(%s\\t\(%s\)\\n) str
(", a->name, a->string\);) p n
() S 8 T (    a = a->next;) N
() S 8 T (}) N
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    ) S
(// Add the alias to the list.  We need to decrement argc by 2 \(command and) c n
(    ) p
(// alias name\).) c n
(    add_alias\(env, argv[1], argc - 2, &argv[2]\);) p n
(}) N
() N
() N
(/** ) c n
( * @brief Built-in unalias command.) N
( *) N
( * Removes an alias from the alias list. ) N
( *) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_unalias\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    ) S
(//TODO: support multiple arguments) c n
(    ) p
(if) K
(\(argc == 2\){) p n
() S 8 T (remove_alias\(env, argv[1]\);) N
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Built-in history command.) N
(builtins.c) (Page 9/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * ) c n
( * When run with no arguments, prints out the last 10 commands run.  When an) N
( * argument is passed, that number of commands is printed.) N
( *) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(//TODO: fix history) N
(void) k
( bic_history\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    ) S
(int) k
( num_items = 0;) p 24 T () S
(// Number of commands to print) c n
() p n
(    ) S
(// We default to printing 10 commands if no argument is passed) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() S 8 T (num_items = 10;) N
(    } ) S
(else) K
( {) p n
() S 8 T (errno = 0;) N
() S 8 T (num_items = atoi\(argv[1]\);) N
() S 8 T () S
(if) K
(\(errno != 0\){) p n
() S 8 T (    perror\(") S
(Error in history) str
("\);) p n
() S 8 T (    ) S
(return) K
(;) p n
() S 8 T (}) N
(    }) N
() N
(    ) S
(// Output ordered pointers; we allocate space for num_items pointers even) c n
(    ) p
(// if they aren't all going to be used.  Point to the histelement struct for) c n
(    ) p
(// the given command.) c n
(    histList* outbuf[num_items];) p 40 T () N
() N
(    histList* h = env->hist;) N
(    ) S
(int) k
( j=num_items - 1;) p n
() N
(    ) S
(// Loop through the last ) c n
(    ) p
(while) K
(\(h != ) p
(NULL) K
( && j >= 0\){) p n
() S 8 T (outbuf[j] = h;) N
() S 8 T (h = h->next;) N
(        j--;) N
(    }) N
(    ) N
(    j++;) S 16 T () S
(// Need to increment j to adjust for final decrement) c n
(    ) p
(for) K
(\() p
(int) k
( i=j; i < num_items; i++\){) p n
() S 8 T (printf\(") S
(%d: %s\\n) str
(", outbuf[i]->num, outbuf[i]->command\);) p n
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Built-in setenv command.) N
( *) N
( * When run with no arguments prints a list of environment variables and values.) N
( * When run with two arguments, sets the variable in the first argument equal to) N
( * the value in the second argument.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_setenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(// Called with no arguments, print entire environment) c n
(    ) p
(if) K
(\(argc == 1\){) p n
() S 8 T () S
(char) k
(** i = environ;) p n
() S 8 T () S
(while) K
(\(*i != ) p
(NULL) K
(\){) p n
() S 8 T (    printf\(") S
(%s\\n) str
(", *i\);) p n
() S 8 T (    i++;) N
() S 8 T (}) N
(    }) N
() N
(    ) S
(// Called with one argument, set variable to null) c n
(builtins.c) (Page 10/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (7/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (11-12) 8
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(else) K
( ) p
(if) K
(\(argc == 2\){) p n
() S 8 T (set_environment\(env, argv[1], ""\);) N
(    }) N
() N
(    ) S
(// Called with two arguments, set variable to 2nd argument) c n
(    ) p
(else) K
( ) p
(if) K
(\(argc == 3\){) p n
() S 8 T (set_environment\(env, argv[1], argv[2]\);) N
(    }) N
() N
(    ) S
(// Called with too many arguments) c n
(    ) p
(else) K
( {) p n
() S 8 T (fprintf\(stderr, ") S
(setenv: Too many arguments.\\n) str
("\);) p n
(    }) N
(    ) N
(}) N
() N
(/** ) c n
( * @brief Built-in lsbuiltins command.) N
( *) N
( * Lists all built-in functions.  Ignores any arguments passed.) N
( * \(Not a project requirement.\)) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_lsbuiltins\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(for) K
(\() p
(int) k
( i=0; i < NUM_BUILTINS; i++\){) p n
() S 8 T (printf\(") S
(%s\\n) str
(", BUILT_IN_COMMANDS[i]\);) p n
(    }) N
() N
(}) N
() N
(/** ) c n
( * @brief Built-in copy command.) N
( *) N
( * Behaves the same as 'cp -i file1 file2'.  Creates a copy of file1 called) N
( * file2.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( bic_copy\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    ) S
(//## When not run with two arguments, print a usage message) c n
(    ) p
(if) K
(\(argc != 3\){) p n
(        fprintf\(stderr, ") S
(copy: too %s arguments\\n) str
(",) p n
(                \(argc < 3\) ? ") S
(few) str
(" : ") p
(many) str
("\);) p n
(        fprintf\(stderr, ") S
(\\n\\tcopy filesrc filedest\\n\\n) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(char) k
(* src = argv[1];) p n
(    ) S
(char) k
(* dst = argv[2];) p n
() N
() N
(    ) S
(//## Check permissions of source) c n
(    ) p
(if) K
(\(access\(src, R_OK\) == -1\){) p n
(        perror\(") S
(Error reading source file) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(//## Check for existance of source file) c n
(    ) p
(if) K
(\(access\(dst, F_OK\) == 0\){) p n
(        printf\(") S
(copy: overwrite '%s'? ) str
(", dst\);) p n
(        ) S
(int) k
( c = getchar\(\);) p n
(        ) S
(while) K
( \(getchar\(\) != ') p
(\\n) str
('\);      ) p
(// read off to end of line) c n
(builtins.c) (Page 11/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(        ) p
(if) K
(\(!\(c == ') p
(y) str
(' || c == ') p
(Y) str
('\)\){) p n
(            ) S
(return) K
(;) p n
(        }) N
(    }) N
() N
(    ) S
(//## Make the copy) c n
(    ) p
(int) k
( src_handle = open\(src, O_RDONLY\);) p n
(    ) S
(int) k
( dst_handle = open\(dst, O_WRONLY | O_CREAT, S_IRWXU\);) p n
(    ) S
(if) K
(\(access\(dst, W_OK\) == -1\){) p n
(        perror\(") S
(Error writing destination file) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(if) K
(\(src_handle < 0 || dst_handle < 0\){) p n
(        perror\(") S
(Error in open) str
("\);) p n
(        ) S
(return) K
(;) p n
(    }) N
() N
(    ) S
(const) K
( ) p
(int) k
( buf_size = 512;) p n
(    ) S
(char) k
( buf[buf_size];) p n
() N
(    ) S
(// Loop over reading from src and writing to dst) c n
(    ) p
(int) k
( pkt_size = pkt_size = read\(src_handle, &buf, buf_size\);) p n
(    ) S
(while) K
(\(pkt_size != 0\){) p n
() N
(        ) S
(if) K
(\(pkt_size < 0\){) p n
(            perror\(") S
(Error in read) str
("\);) p n
(        }) N
() N
(        ) S
(int) k
( size_written = write\(dst_handle, &buf, pkt_size\);) p n
(        ) S
(if) K
(\(size_written < 0\){) p n
(            perror\(") S
(Error in write) str
("\);) p n
(        }) N
() N
(        pkt_size = read\(src_handle, &buf, buf_size\);) N
(    }) N
() N
(    close\(src_handle\);) N
(    close\(dst_handle\);) N
() N
(}) N
() N
(//------------------------------------------------------------------------------) c n
(//-- Definitions of debug functions) N
(//------------------------------------------------------------------------------) N
() p n
(#ifdef) K
( DEBUG) p n
() N
(/** ) c n
( * @brief Debugs the tokenizer by showing argument count and argument values for) N
( * the arguments passed to ::_db_tokenizer.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_tokenizer\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    printf\(") S
(argc = %d\\n) str
(", argc\);) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i<argc; i++\){) p n
() S 8 T (printf\(") S
(argv[%d] = %s\\n) str
(", i, argv[i]\);) p n
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Prints out some of the variables in the global ::kgenv environment) N
( * object for debugging purposes.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
(builtins.c) (Page 12/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (8/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (13-14) 9
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * @param argc The argument count for the command entered.) c 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_kgenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    printf\(") S
(uid=%d\\n) str
(", env->uid\);) p n
(    printf\(") S
(homedir=%s\\n) str
(", env->homedir\);) p n
() N
(    printf\(") S
(cwd=%s\\n) str
(", env->cwd\);) p n
(    printf\(") S
(pwd=%s\\n) str
(", env->pwd\);) p n
(    ) N
(    printf\(") S
(prompt=%s\\n) str
(", env->prompt\);) p n
(}) N
() N
() N
(/** ) c n
( * @brief Prints out path list for debugging purposes.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_path\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    pathList* p = env->path;) N
(    ) S
(while) K
( \(p != ) p
(NULL) K
(\){) p n
() S 8 T (printf\(") S
(%s\\n) str
(", p->element\);) p n
() S 8 T (p = p->next;) N
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Prints out entire history list for debugging purposes.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_history\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    histList* h = env->hist;) N
(    ) S
(while) K
( \(h != ) p
(NULL) K
(\){) p n
() S 8 T (printf\(") S
(%d: %s\\n) str
(", h->num, h->command\);) p n
() S 8 T (h = h->next;) N
(    }) N
(}) N
() N
() N
(/** ) c n
( * @brief Prints "true" if the first argument contains a wildcard and "false" if) N
( * it does not.  Used to debug ::contains_wildcards.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_wc_contains\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(    printf\(") S
(%s\\n) str
(", contains_wildcards\(argv[1]\) ? ") p
(true) str
(":") p
(false) str
("\);) p n
(}) N
() N
() N
(/** ) c n
( * @brief Prints the expanded version of the first argument.  Used to debug) N
( * ::expand_argument.) N
( * ) N
( * @param env A pointer to the global ::kgenv environment object.) N
( * @param argc The argument count for the command entered.) S 64 T () N
( * @param argv[] The argument values for the command entered.) N
( */) N
(void) k
( _db_wc_expand\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
(builtins.c) (Page 13/14) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    printf\(") p
(%s\\n) str
(", expand_argument\(argv[1]\)\);) p n
(}) N
() N
(#endif) K
( ) p
(//DEBUG) c n
(builtins.c) (Page 14/14) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.c) (9/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 10
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/*) c n
(  get_path.c) N
(  Ben Miller) N
() N
(  Just a little sample function that gets the PATH env var, parses it and) N
(  puts it into a linked list, which is returned.) N
(*/) N
(#include) K
( ") p
(get_path.h) str
(") p n
() N
(struct) k
( pathelement *get_path\(\)) p n
({) N
(  ) S
(/* path is a copy of the PATH and p is a temp pointer */) c n
(  ) p
(char) k
( *path, *p;) p n
() N
(  ) S
(/* tmp is a temp point used to create a linked list and pathlist is a) c n
(     pointer to the head of the list */) N
(  ) p
(struct) k
( pathelement *tmp, *pathlist = ) p
(NULL) K
(;) p n
() N
(  p = getenv\(") S
(PATH) str
("\);) p 24 T () S
(/* get a pointer to the PATH env var.) c n
() S 8 T () S 16 T () S 24 T (   make a copy of it, since strtok modifies the) N
() S 8 T () S 16 T () S 24 T (   string that it is working with... */) N
(  path = malloc\(\(strlen\(p\)+1\)*) p
(sizeof) K
(\() p
(char) k
(\)\);) p 48 T () S
(/* use malloc\(3C\) this time */) c n
(  strncpy\(path, p, strlen\(p\)\);) p n
(  path[strlen\(p\)] = ') S
(\\0) str
(';) p n
() N
(  p = strtok\(path, ") S
(:) str
("\); ) p 32 T () S
(/* PATH is : delimited */) c n
(  ) p
(do) K
() p 8 T () S 16 T () S 24 T () S 32 T () S
(/* loop through the PATH */) c n
(  {) p 8 T () S 16 T () S 24 T () S 32 T () S
(/* to build a linked list of dirs */) c n
(    ) p
(if) K
( \( !pathlist \)) p 24 T () S 32 T () S
(/* create head of list */) c n
(    {) p n
(      tmp = calloc\(1, ) S
(sizeof) K
(\() p
(struct) k
( pathelement\)\);) p n
(      pathlist = tmp;) N
(    }) N
(    ) S
(else) K
() p 16 T () S 24 T () S 32 T () S
(/* add on next element */) c n
(    {) p n
(      tmp->next = calloc\(1, ) S
(sizeof) K
(\() p
(struct) k
( pathelement\)\);) p n
(      tmp = tmp->next;) N
(    }) N
(    tmp->element = p;) S 24 T () N
(    tmp->next = ) S
(NULL) K
(;) p n
(  } ) S
(while) K
( \( p = strtok\() p
(NULL) K
(, ") p
(:) str
("\) \);) p n
() N
(  ) S
(return) K
( pathlist;) p n
(} ) S
(/* end get_path\(\) */) c n
() p n
() N
(get_path.c) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/get_path.c) (10/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 11
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file kgsh.c) N
( * @brief kgsh main file) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#include) K
( <stdlib.h>) p n
(#include) K
( <stdio.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <strings.h>) p n
(#include) K
( <limits.h>) p n
() N
(#include) K
( <unistd.h>) p 24 T () S
(// for access) c n
(#include) K
( <signal.h>) p n
() N
(#include) K
( <pwd.h>) p n
(#include) K
( <dirent.h>) p n
(#include) K
( <sys/types.h>) p n
(#include) K
( <sys/wait.h>) p n
(#include) K
( <errno.h>) p n
() N
(#include) K
( ") p
(builtins.h) str
(") p n
(#include) K
( ") p
(util.h) str
(") p n
(#include) K
( ") p
(get_path.h) str
(") p n
() N
(void) k
( initialize_environment\(kgenv* env\);) p n
() N
(void) k
( sig_interrupt\() p
(int) k
( signal\);) p n
() N
(int) k
( main\() p
(int) k
( argc, ) p
(char) k
(* argv[]\){) p n
() N
(    kgenv global_env; ) S
(// The global environment structure) c n
(    ) p n
(    ) S
(// Populate the global environment for the first time) c n
(    initialize_environment\(&global_env\);) p n
() N
(    sigset\(SIGINT, sig_interrupt\);) S 40 T () S
(// Interrupt function for Ctrl-C ) c n
(    sigignore\(SIGTSTP\); ) p 32 T () S 40 T () S
(// Ignore Ctrl-Z) c n
(    sigignore\(SIGTERM\);) p n
() N
(    ) S
(char) k
(*  line_in = ) p
(NULL) K
(; ) p
(// Stores the command entered \(pointed to by in_argv\)) c n
() p n
(    ) S
(// The main loop that is executed once for each command prompt.) c n
(    ) p
(while) K
(\(1\){) p n
() N
() S 8 T () S
(// Free up memory from the previous iteration.) c n
() p 8 T () S
(//Removed to prevent double free) c n
() p 8 T () S
(//if\(line_in != NULL\)) c n
() p 8 T () S
(//    free\(line_in\);) c n
() p n
() S 8 T () S
(//## Print the shell prompt) c n
() p 8 T (printf\(") S
(%s %s> ) str
(", global_env.prompt, global_env.cwd\);) p n
() N
() N
() S 8 T () S
(//## Read the a line from the shell) c n
() p 8 T () S
(// NOTE: line_in can not be freed until after the loop is done) c n
() p 8 T () S
(// executing since in_argv points to memory allocated here.  Memory) c n
() p 8 T () S
(// allocation is only done _once_ for the input string.) c n
() p 8 T (line_in = \() S
(char) k
(*\)calloc\(LINE_BUFFER_SIZE, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(if) K
(\(!line_in\){) p n
(kgsh.c) (Page 1/2) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T (    perror\(") S
(Not enough heap) str
("\);) p n
() S 8 T (    exit\(1\);) N
() S 8 T (}) N
() S 8 T (fgets\(line_in, LINE_BUFFER_SIZE, stdin\);) N
() N
() S 8 T () S
(//## Parse the command and execute the appropriate action) c n
() p 8 T (process_command_in\(line_in, &global_env, false\);) N
(    }) N
(}) N
() N
(/** ) c n
( * @brief Initializes the kgenv global environment.) N
( *) N
( * This function is only called once at startup to populate the singleton) N
( * instance of the kgenv stuct.) N
( * ) N
( * @param env A pointer to the global environment instance.) N
( */) N
(void) k
( initialize_environment\(kgenv* env\){) p n
() N
(    ) S
(char) k
(* cwd;) p n
(    cwd = getcwd\() S
(NULL) K
( , CWD_BUFFER_SIZE\);) p n
() N
(    ) S
(if) K
(\(cwd == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Can't get current working directory\\n) str
("\);) p n
() S 8 T (exit\(2\);) N
(    }) N
() N
(    env->cwd = cwd;) N
(    env->pwd = ) S
(NULL) K
(;) p n
(    env->prompt = "";) N
(    env->uid = getuid\(\);) N
(    env->pword_entry = getpwuid\(env->uid\);) N
(    env->homedir = env->pword_entry->pw_dir;) N
(    env->path = get_path\(\);) N
(    env->hist = ) S
(NULL) K
(;) p n
(    env->aliases = ) S
(NULL) K
(;) p n
() N
(}) N
() N
(/** ) c n
( * @brief Function executed when SIGINT \(Ctrl-C\) is caught. ) N
( * ) N
( * @param signal Signal passed in.  Currently it's always SIGINT.) N
( */) N
(void) k
( sig_interrupt\() p
(int) k
( signal\){) p n
(    printf\(") S
(\\n) str
("\);) p n
(    ) S
(// TODO: determine if anything special needs to be done to forward SIGINT to) c n
(    ) p
(// a child process) c n
(}) p n
(kgsh.c) (Page 2/2) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/kgsh.c) (11/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 12
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file util.c) N
( * @brief Definitions of utility functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#include) K
( ") p
(util.h) str
(") p n
(#include) K
( ") p
(alias.h) str
(") p n
(#include) K
( ") p
(builtins.h) str
(") p n
(#include) K
( ") p
(get_path.h) str
(") p n
(#include) K
( ") p
(wildcard.h) str
(") p n
() N
(/** ) c n
( * @brief Returns the location of an executable in the PATH.) N
( *) N
( * Loops through the path linked list and returns the location of the first) N
( * file named command in the path directories with execute permissions.  Does) N
( * not go into sub-directories in search of an executable.) N
( * ) N
( * @param command Name of the executable to search for.) N
( * @param pathlist The path list to search.  Usually the one stored in the) N
( * global ::kgenv environment structure.) N
( * ) N
( * @return ) N
( */) N
(char) k
(* which\() p
(const) K
( ) p
(char) k
(* command, pathList* pathlist\){) p n
(    pathList* pl = pathlist;) N
() N
(    ) S
(// Loop to iterate over every directory in the path) c n
(    ) p
(while) K
(\(pl != ) p
(NULL) K
(\){) p n
() N
() S 8 T (DIR* dirp = opendir\(pl->element\);) N
() N
() S 8 T () S
(if) K
(\(dirp == ) p
(NULL) K
(\){) p n
() N
() S 8 T (    perror\(") S
(Error in which) str
("\);) p n
() S 8 T (    ) S
(return) K
( ) p
(NULL) K
(;) p n
() N
() S 8 T (} ) S
(else) K
( {) p n
() N
() S 8 T (    ) S
(struct) k
( dirent* dp = readdir\(dirp\);) p 48 T () S
(//TODO: errno check?) c n
() p n
() S 8 T (    ) S
(// Iterate over every file in the directory) c n
() p 8 T (    ) S
(while) K
(\(dp != ) p
(NULL) K
(\){) p n
() N
() S 8 T () S 16 T () S
(// Determine if the filename matches the command) c n
() p 8 T () S 16 T () S
(if) K
(\(strcmp\(dp->d_name, command\) == 0\){) p n
(                    closedir\(dirp\);) N
() N
() S 8 T () S 16 T (    ) S
(// Generate an absolute path for the file that was found) c n
() p 8 T () S 16 T (    ) S
(char) k
(* full_path = malloc\(strlen\(command\) ) p n
() S 8 T () S 16 T () S 24 T (    + strlen\(pl->element\) + 2\);                ) N
() S 8 T () S 16 T (    ) S
(if) K
(\(full_path == ) p
(NULL) K
(\){) p n
() S 8 T () S 16 T () S 24 T (perror\(") S
(Error in which) str
("\);) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 8 T () S 16 T (    }) N
() N
(                    sprintf\(full_path, ") S
(%s/%s) str
(", pl->element, command\);) p n
() N
() S 8 T () S 16 T (    ) S
(// Check for execute permissions on the file found) c n
(util.c) (Page 1/6) (Sep 30, 09 22:58) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (    ) S
(if) K
(\(access\(full_path, X_OK\) == 0\){) p n
() S 8 T () S 16 T () S 24 T () S
(return) K
( full_path;) p n
() S 8 T () S 16 T (    } ) S
(else) K
( {) p n
() S 8 T () S 16 T () S 24 T () S
(//TODO: Verify we don't need a perror here.  This should) c n
() p 8 T () S 16 T () S 24 T () S
(//be silent if an error condition occurs.) c n
() p n
() S 8 T () S 16 T () S 24 T () S
(// Free the memory if we're not returning it) c n
() p 8 T () S 16 T () S 24 T (free\(full_path\);) N
() S 8 T () S 16 T (    }) N
() S 8 T () S 16 T (}) N
() S 8 T () S 16 T (dp = readdir\(dirp\);) N
() S 8 T (    }) N
() S 8 T (    ) S
(if) K
(\(closedir\(dirp\) == -1\){) p n
() S 8 T () S 16 T (perror\(") S
(Error in which) str
("\);) p n
() S 8 T (    }) N
() S 8 T (}) N
() S 8 T (pl = pl->next;) N
(    }) N
(    ) S
(return) K
( ) p
(NULL) K
(;) p n
(}) N
() N
() N
(/** ) c n
( * @brief Adds a command to the history list.) N
( * ) N
( * @param command The command to be added to the list.) N
( * @param env The global ::kgenv environment object.  Needed to access the) N
( * global history list.) N
( */) N
(void) k
( add_to_history\() p
(char) k
(* command, kgenv* env\){) p n
(    histList* new_item;) N
(    new_item = malloc\() S
(sizeof) K
(\(histList\)\);) p n
(    ) S
(if) K
(\(new_item == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error adding to history) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    new_item->command = \() S
(char) k
(*\)malloc\(strlen\(command\) + 1\);) p n
(    ) S
(if) K
(\(new_item->command == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error adding to history) str
("\);) p n
() S 8 T () S
(return) K
(;) p n
(    }) N
() N
(    strcpy\(new_item->command, command\);) N
(    new_item->next = env->hist;) N
() N
(    ) S
(if) K
(\(env->hist != ) p
(NULL) K
(\){) p n
() S 8 T (new_item->num = env->hist->num + 1;) N
(    } ) S
(else) K
( {) p n
() S 8 T (new_item->num = 1;) N
(    }) N
() N
(    env->hist = new_item;) N
(}) N
() N
() N
(/** ) c n
( * @brief Executes a command.) N
( *) N
( * Forks the shell process and executes the given command in the child process.) N
( * Passes all environment variables. ) N
( * ) N
( * @param cmd The command to be exectued.) N
( * @param argv Argument array for the command.) N
( * ) N
( * @return The exit status of the command.) N
( */) N
(int) k
( exec_cmd\() p
(char) k
(* cmd, ) p
(char) k
(** argv\){) p n
() N
(util.c) (Page 2/6) (Sep 30, 09 22:58) title
grestore
(Printed by Kevin Graney) rhead
(src/util.c) (12/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3-4) 13
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(    ) p
(//TODO: Print absolute path even if relative is passed?) c n
(    #ifdef O_VERBOSE_EXE) p n
(    printf\(") S
(Executing %s\\n) str
(", cmd\);) p 40 T () S
(// Print out what's being executed) c n
(    fflush\(stdout\);) p n
(    #endif ) S
(//O_VERBOSE_EXE) c n
() p n
(    pid_t child_pid = fork\(\);) N
(    ) S
(int) k
( child_status;) p n
() N
(    ) S
(if) K
(\(child_pid == 0\){) p 24 T () S 32 T () S 40 T () S
(//** Executed in child process) c n
() p n
() S 8 T (execve\(cmd, argv, environ\);) S 40 T () S
(//TODO: switch to using kgenv) c n
() p 8 T () S 16 T () S 24 T () S 32 T () S 40 T () S
(//environment list) c n
() p 8 T () N
() S 8 T () S
(// Exec commands only return if there's an error) c n
() p 8 T (perror\(") S
(Error in exec) str
("\);) p 40 T () N
() S 8 T () N
() S 8 T () S
(// We exit since the process image will be replaced with itself here and) c n
() p 8 T () S
(// we will need to enter "exit" twice to truely exit.) c n
() p 8 T (exit\(0\);) S 24 T () N
() N
(    } ) S
(else) K
( ) p
(if) K
(\(child_pid > 0\) {) p 32 T () S 40 T () S
(//** Executed in parent process) c n
() p n
() S 8 T (waitpid\(child_pid, &child_status, 0\);) N
() N
() S 8 T () S
(// Print out the exit status if it is non-zero) c n
() p 8 T () S
(if) K
(\(WEXITSTATUS\(child_status\) != 0\)) p n
() S 8 T (    printf\(") S
(Exit %d\\n) str
(", WEXITSTATUS\(child_status\)\);) p n
() N
(    } ) S
(else) K
( {) p 16 T () S 24 T () S 32 T () S 40 T () S
(//** Didn't fork properly ) c n
() p n
() S 8 T (perror\(") S
(Fork failed\\n) str
("\);) p n
() N
(    }) N
() N
(    ) S
(return) K
( child_status;) p n
(}) N
() N
() N
(/** ) c n
( * @brief Processes an input command line.) N
( * ) N
( * Processes an input command line entered at the shell prompt from tokenizing) N
( * through execution.  Handles wildcards, aliases, built-in commands, relative) N
( * and absolute paths, and any other command line syntax.) N
( *) N
( * This function is called primarily through the closed prompt loop in ::main.) N
( * Memory allocation and deallocation of line_in is handled by ::main. ) N
( *) N
( * @param line_in The command line entered at the shell prompt.) N
( * @param global_env The ::kgenv global environment structure.) N
( * @param deref_alias True if being called on an expanded alias.  False) N
( * otherwise.  Needed to allow aliases to override commands without causing) N
( * circular references.) N
( * ) N
( * @return The length of the line processed.) N
( */) N
(int) k
( process_command_in\() p
(char) k
(* line_in, kgenv* global_env, bool deref_alias\){ ) p n
() N
(    ) S
(int) k
(    in_argc;) p 24 T () S 32 T () S
(// argc for the command being processed) c n
(    ) p
(char) k
(** in_argv;) p 24 T (        ) S
(// argv for the command being processed) c n
(    ) p
(int) k
(    line_length; ) p 32 T () S
(// The length of the input line) c n
() p n
(    line_length = strlen\(line_in\);) N
(    ) S
(if) K
(\(line_in[line_length - 1] == ') p
(\\n) str
('\)      ) p
(// Remove trailing newline) c n
() p 8 T (line_in[line_length -1] = ') S
(\\0) str
(';) p n
() N
(    ) S
(//## Capture an EOF with no prefix ) c n
(    ) p
(if) K
(\(feof\(stdin\)\){) p n
(util.c) (Page 3/6) (Sep 30, 09 22:58) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S
(//printf\("\\nUse \\"exit\\" to leave kgsh.\\n"\);) c n
() p 8 T () S
(//TODO: Fix this feature.) c n
(    }) p n
() N
(    ) S
(//## Add the line to the history stack) c n
(    ) p
(if) K
(\(line_in[0] != ') p
(\\0) str
(') p 32 T () S
(// don't add blank lines) c n
() p 8 T (    && !deref_alias\){) S 32 T () S
(// don't add the second call for an alias) c n
() p 8 T (add_to_history\(line_in, global_env\);) N
(    }) N
(    ) N
() N
(    ) S
(//## Expand wildcards) c n
(    ) p
(if) K
(\(contains_wildcards\(line_in\)\){) p n
() S 8 T () S
(char) k
(* line_in_original = line_in;) p n
() S 8 T (line_in = expand_wildcards\(line_in\);) N
() S 8 T (free\(line_in_original\);) N
(    }) N
() N
() N
(    ) S
(//## Tokenize the line) c n
(    ) p
(//TODO: free in_argv) c n
(    in_argv = \() p
(char) k
(**\)calloc\(MAX_TOKENS_PER_LINE, ) p
(sizeof) K
(\() p
(char) k
(*\)\);) p n
(    ) S
(if) K
(\(in_argv == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error processing command) str
("\);) p n
() S 8 T () S
(return) K
( 0;) p n
(    }) N
() N
(    ) S
(if) K
(\(!parse_line\(&in_argc, &in_argv, line_in\)\){) p n
() N
() S 8 T (free\(in_argv\);) N
() S 8 T (free\(line_in\);) N
() S 8 T () S
(return) K
( line_length;) p 32 T () S
(// continue if the line is blank) c n
(    }) p n
() N
(    ) S
(//## Check for aliases \(Do before builtins to allow for aliasing) c n
(    ) p
(//## builtin commands.) c n
(    ) p
(if) K
(\(!deref_alias\){) p n
() S 8 T (aliasList* alias_ptr = is_alias\(global_env, in_argv[0]\);) N
() S 8 T () S
(if) K
(\(alias_ptr\){) p n
() S 8 T (    ) S
(char) k
(* new_line_in = \() p
(char) k
(*\)malloc\(strlen\(alias_ptr->string\) + 1\);) p n
() S 8 T (    strcpy\(new_line_in, alias_ptr->string\);) N
() N
() S 8 T (    ) S
(int) k
( length = process_command_in\(new_line_in, global_env, true\);) p n
() S 8 T (    detokenize\(alias_ptr->string, length\);) N
() N
() S 8 T (    free\(in_argv\);) N
() S 8 T (    free\(line_in\);) N
() S 8 T (    ) S
(return) K
( line_length;) p n
() S 8 T (}) N
(    }) N
() N
() N
(    ) S
(//## Process built in commands) c n
(    ) p
(int) k
( builtin_code = is_builtin\(in_argv[0]\);) p n
(    ) S
(if) K
(\(builtin_code\){) p n
() S 8 T (#ifdef O_VERBOSE_EXE) N
() S 8 T (printf\(") S
(Executing builtin %s\\n) str
(", in_argv[0]\);) p n
() S 8 T (#endif ) S
(//O_VERBOSE_EXE) c n
() p 8 T (\(*BUILT_IN_FUNCS[--builtin_code]\)\(global_env, in_argc, in_argv\);) N
() N
() S 8 T (free\(in_argv\);) N
() S 8 T (free\(line_in\);) N
() S 8 T () S
(return) K
( line_length;) p n
(    }) N
() N
(    ) S
(//## Process absolute and relative paths) c n
(    ) p
(// TODO: cleanup this logic) c n
(    ) p
(if) K
(\( \(in_argv[0][0] == ') p
(/) str
('\) ||) p n
() S 8 T (\(\(in_argv[0][0] == ') S
(.) str
('\) && \(\(in_argv[0][1] == ') p
(/) str
('\) ||) p n
(util.c) (Page 4/6) (Sep 30, 09 22:58) title
grestore
(Printed by Kevin Graney) rhead
(src/util.c) (13/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (5-6) 14
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T ( \(in_argv[0][1] == ') S
(.) str
('\) && \(in_argv[0][2] == ') p
(/) str
('\)\)\)\){) p n
() N
() S 8 T () S
(// Execute the file if it's executable) c n
() p 8 T () S
(if) K
(\(access\(in_argv[0], X_OK\) == 0\){) p n
() S 8 T (    exec_cmd\(in_argv[0], in_argv\);) N
() N
() S 8 T (    free\(in_argv\);) N
() S 8 T (    free\(line_in\);) N
() S 8 T (    ) S
(return) K
( line_length;) p n
() S 8 T (}) N
(    }) N
() N
() N
(    ) S
(//## Process commands in the path) c n
(    ) p
(char) k
(* exe_path = which\(in_argv[0], global_env->path\);) p n
(    ) S
(if) K
(\(exe_path != ) p
(NULL) K
(\){) p n
() N
() S 8 T (exec_cmd\(exe_path, in_argv\);) N
() N
() S 8 T (free\(in_argv\);) N
() S 8 T (free\(line_in\);) N
() S 8 T (free\(exe_path\);) N
() S 8 T () S
(return) K
( line_length;) p n
() N
(    }) N
() N
(    ) S
(//## Command not found) c n
(    fprintf\(stderr, ") p
(%s: Command not found.\\n) str
(", in_argv[0]\);) p n
() N
(    free\(in_argv\);) N
(    free\(line_in\);) N
(    ) S
(return) K
( line_length;) p n
(}) N
() N
(/** ) c n
( * @brief Parses a command line into an argument \(argv\) array.) N
( * ) N
( * @param argc Will be set to the number of arguments in the command string.) N
( * @param argv Will be set to point to the array of arguments in the command ) N
( * string.  This argument should be preallocated to be an array of pointers.) N
( * The returned array will point to memory locations inside of line, so it's) N
( * important that line is not deleted before appropriate action is taken.) N
( * @param line The input line to parse.) N
( * ) N
( * @return 1 if the command was successfully parsed, and 0 if the line is blank.) N
( */) N
(int) k
( parse_line\() p
(int) k
(* argc, ) p
(char) k
(*** argv, ) p
(char) k
(* line\){) p n
(    ) S
(char) k
(* strtok_ptr = ) p
(NULL) K
(;) p n
(    ) S
(char) k
(* token = strtok_r\(line, ") p
( \\n) str
(", &strtok_ptr\);) p n
() N
(    ) S
(// If the line is blank, the first token will be the null string.) c n
(    ) p
(if) K
(\(token == ') p
(\\0) str
('\)) p n
() S 8 T () S
(return) K
( 0;) p 24 T () N
() N
(    *argv[0] = token;) S 24 T () S
(// argv[0] is the command name) c n
() p n
(    ) S
(for) K
(\() p
(int) k
( i = 1; token != ) p
(NULL) K
( && i < MAX_TOKENS_PER_LINE; i++\){) p n
() S 8 T (token = strtok_r\() S
(NULL) K
(, ") p
( \\t) str
(", &strtok_ptr\);) p n
() S 8 T (\(*argv\)[i] = token;) N
() S 8 T (*argc = i;) N
(    }) N
() N
(    ) S
(return) K
( 1;) p n
(}) N
() N
() N
(/** ) c n
( * @brief Detokenizes a string that was tokenized using ::strtok.) N
( *) N
(util.c) (Page 5/6) (Sep 30, 09 22:58) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
( * Used primarily by alias functions to detokenize the alias string before ) c n
( * storing it in the alias linked list.  For this function to work, all tokens) N
( * must still be stored sequentially in memory as they are after a call to) N
( * ::strtok.) N
( * ) N
( * @param str Pointer to the start of the string.) N
( * @param length The length of the string in characters.) N
( */) N
(void) k
( detokenize\() p
(char) k
(* str, ) p
(int) k
( length\){) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i < length - 1; i++\){) p n
() S 8 T () S
(if) K
(\(str[i] == ') p
(\\0) str
('\){) p n
() S 8 T (    str[i] = ') S
( ) str
(';) p n
() S 8 T (}) N
(    }) N
(}) N
() N
(/** ) c n
( * @brief Sets an environment variable.) N
( * ) N
( * Sets an environment variable in the ::kgenv global environment structure's) N
( * internal environment string.  Special action is taken if either the HOME or) N
( * PATH environment variables change since other data structres need to be) N
( * updated.) N
( *) N
( * @param env The global ::kgenv environment structure.) N
( * @param name The name of the environment variable to set.) N
( * @param value The value \(string\) to set the environment variable to.) N
( */) N
(void) k
( set_environment\(kgenv* env, ) p
(char) k
(* name, ) p
(char) k
(* value\){) p n
() N
(    ) S
(// Store the new environment variable) c n
(    ) p
(char) k
(* str = malloc\(strlen\(name\) + strlen\(value\) + 2\);) p n
(    sprintf\(str, ") S
(%s=%s) str
(", name, value\);) p n
(    putenv\(str\);) N
(    ) S
(//free\(str\);    //TODO: confirm this is correct and putenv doesn't alias her) c n
(e) N
(                    ) p
(// \(apparently it does ...\)) c n
() p n
(    ) S
(// Handle a change to HOME) c n
(    ) p
(if) K
(\(strcmp\(name, ") p
(HOME) str
("\) == 0\){) p n
() S 8 T () S
(//TODO: improve?) c n
() p 8 T (env->homedir = str + 5;) N
(    }) N
() N
(    ) S
(// Handle a change to PATH) c n
(    ) p
(else) K
( ) p
(if) K
(\(strcmp\(name, ") p
(PATH) str
("\) == 0\){) p n
() S 8 T () S
(//TODO: check for memory leaks here) c n
() p 8 T (pathList* p = env->path;) N
() S 8 T (pathList* old;) N
() N
() S 8 T () S
(// Only free the first one since they are malloced together.) c n
() p 8 T (free\(p->element\);) N
() S 8 T () S
(while) K
(\(p != ) p
(NULL) K
(\){) p n
() S 8 T (    old = p;) N
() S 8 T (    p = p->next;) N
() S 8 T (    free\(old\);) N
() S 8 T (}) N
() N
() S 8 T (env->path = get_path\(\);) N
(    }) N
(}) N
(util.c) (Page 6/6) (Sep 30, 09 22:58) title
grestore
(Printed by Kevin Graney) rhead
(src/util.c) (14/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 15
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file wildcard.c) N
( * @brief Definitions of wildcard functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#include) K
( ") p
(util.h) str
(") p n
(#include) K
( ") p
(wildcard.h) str
(") p n
() N
() N
(/** ) c n
( * @brief Determines if an input string contains a wildcard.) N
( *) N
( * Used in process_command_in\(\) to determine if wildcard processing can be ) N
( * bypassed or not.  Wildcards checked for are defined in ::WILDCARD_CHARS.) N
( * ) N
( * @param line The input command line to check for a wildcard in.) N
( * ) N
( * @return True if a wildcard is present.  False otherwise.) N
( */) N
(bool contains_wildcards\() p
(char) k
(* line\){) p n
() N
(    ) S
(//## Search the line for any of the wildcard characters.  Return true at the) c n
(    ) p
(//## first match.) c n
(    ) p
(for) K
(\() p
(int) k
( i=0; WILDCARD_CHARS[i] != ') p
(\\0) str
('; i++\){) p n
(        ) S
(if) K
(\(strchr\(line, WILDCARD_CHARS[i]\) != ) p
(NULL) K
(\){) p n
(            ) S
(return) K
( true;) p n
(        }) N
(    }) S 8 T () N
() N
(    ) S
(return) K
( false;) p 24 T () S
(// We didn't find any wildcards.) c n
(}) p n
() N
() N
(/** ) c n
( * @brief Expands the wildcards present in an input string.) N
( *) N
( * Expands all the wildcards present in the input string based on the current) N
( * working directory.  First the line is parsed into an argv array and each) N
( * argument is expanded individually using glob\(3C\).  Next the expanded) N
( * arguments are combined back in order to form a single expanded string.) N
( *) N
( * \\note The return value from this function is a pointer to the heap.  The) N
( * returned pointer should be freed when not needed anymore.) N
( *) N
( * @param line The line to expand.) N
( * ) N
( * @return The expanded version of line.) N
( */) N
(char) k
(* expand_wildcards\() p
(char) k
(* line\){) p n
() N
(    ) S
(//## Parse the line into arguments) c n
(    ) p
(int) k
(    argc;) p n
(    ) S
(char) k
(** argv;) p n
() N
(    argv = \() S
(char) k
(**\)calloc\(MAX_TOKENS_PER_LINE, ) p
(sizeof) K
(\() p
(char) k
(*\)\);) p n
(    ) S
(if) K
(\(argv == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error while expanding wilcards) str
("\);) p n
() S 8 T () S
(return) K
( ) p
(NULL) K
(;) p n
(    }) N
(wildcard.c) (Page 1/3) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(    parse_line\(&argc, &argv, line\);) N
() N
(    ) S
(//## Expand all the arguments individually) c n
(    ) p
(char) k
(** expanded_argv = \() p
(char) k
(**\)calloc\(argc, ) p
(sizeof) K
(\() p
(char) k
(*\)\);) p n
(    ) S
(if) K
(\(expanded_argv == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error while expanding wilcards) str
("\);) p n
() S 8 T () S
(return) K
( ) p
(NULL) K
(;) p n
(    }) N
() N
(    ) S
(for) K
(\() p
(int) k
( i=0; i < argc; i++\){) p n
(        expanded_argv[i] = expand_argument\(argv[i]\);) N
(    }) N
() N
(    ) S
(//## Find the total length the expanded line will be) c n
(    ) p
(int) k
( length = 0;) p n
(    ) S
(for) K
(\() p
(int) k
( i=0; i < argc; i++\){) p n
(        length += strlen\(expanded_argv[i]\) + 1;) N
(    }) N
() N
(    ) S
(//## Form expanded line by concatenating all the expanded arguments) c n
(    ) p
(char) k
(* expanded = calloc\(length, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
(    ) S
(if) K
(\(expanded == ) p
(NULL) K
(\){) p n
() S 8 T (perror\(") S
(Error while expanding wilcards) str
("\);) p n
() S 8 T () S
(return) K
( ) p
(NULL) K
(;) p n
(    }) N
() N
(    ) S
(for) K
(\() p
(int) k
( i=0; i < argc; i++\){) p n
(        strcat\(expanded, ") S
( ) str
("\);) p n
(        strcat\(expanded, expanded_argv[i]\);) N
(        free\(expanded_argv[i]\);) N
(    }) N
() N
(    ) S
(//## Free up memory) c n
(    free\(expanded_argv\);) p n
(    free\(argv\);) N
() N
(    ) S
(return) K
( expanded;) p n
(}) N
() N
() N
() N
(/** ) c n
( * @brief Expands wildcards in a single argument string.) N
( *) N
( * Called by expand_wildcards\(\), this function expands a single argument in the) N
( * argv array by calling glob\(3C\).) N
( *) N
( * \\note This function returns a pointer to the heap, therefore the pointer must) N
( * be freed after use.  A copy of the input argument is returned if no wildcards) N
( * are present to prevent issues with deallocating memory that is allocated) N
( * outside this function.) N
( * ) N
( * @param argument The argument string to be expanded.) N
( * ) N
( * @return The expanded argument.  If no wildcards are present in the string a) N
( * copy of the argument parameter is returned.) N
( */) N
(char) k
(* expand_argument\() p
(char) k
(* argument\){) p n
() N
(    glob_t pglob;) N
() N
(    ) S
(if) K
(\(glob\(argument, 0, ) p
(NULL) K
(, &pglob\) == 0\){) p 48 T () S
(//TODO: errno handling) c n
() p n
(        ) S
(//## If no wildcard in the argument return a copy of itself) c n
(        ) p
(if) K
(\(pglob.gl_pathc == 0\){) p n
(            ) S
(char) k
(* argument_copy = malloc\(strlen\(argument\) + 1\);) p n
() S 8 T (    ) S
(if) K
(\(argument_copy == ) p
(NULL) K
(\){) p n
() S 8 T () S 16 T (perror\(") S
(Error expanding argument) str
("\);) p n
(wildcard.c) (Page 2/3) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/wildcard.c) (15/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (3) 16
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p 8 T () S 16 T (globfree\(&pglob\);) N
() S 8 T () S 16 T () S
(return) K
( ) p
(NULL) K
(;) p n
() S 8 T (    }) N
() N
(            strcpy\(argument_copy, argument\);) N
() S 8 T (    globfree\(&pglob\);) S 32 T () S 40 T () S
(// Free up memory) c n
(            ) p
(return) K
( argument_copy;) p n
(        }) N
() N
(        ) S
(//## Determine total length of expanded argument) c n
(        ) p
(int) k
( length = 0;) p n
(        ) S
(for) K
(\() p
(int) k
( i=0; i < pglob.gl_pathc; i++\){) p n
(            length += strlen\(pglob.gl_pathv[i]\) + 1;) N
(        }) N
() N
(        ) S
(//## Allocate new space for the expanded argument) c n
(        ) p
(char) k
(* expanded_arg = calloc\(length, ) p
(sizeof) K
(\() p
(char) k
(\)\);) p n
() S 8 T () S
(if) K
(\(expanded_arg == ) p
(NULL) K
(\){) p n
() S 8 T (    perror\(") S
(Error expanding argument) str
("\);) p n
() S 8 T (    globfree\(&pglob\);) N
() S 8 T (    ) S
(return) K
( ) p
(NULL) K
(;) p n
() S 8 T (}) N
() N
(        ) S
(//## Form expanded argument string) c n
(        ) p
(for) K
(\() p
(int) k
( i=0; i < pglob.gl_pathc; i++\){) p n
(            strcat\(expanded_arg, ") S
( ) str
("\);) p n
(            strcat\(expanded_arg, pglob.gl_pathv[i]\);) N
(        } ) N
() N
(        ) S
(//## Free up memory ) c n
(        globfree\(&pglob\);) p n
() N
(        ) S
(return) K
( expanded_arg;) p n
() N
(    } ) S
(else) K
( {) p n
() N
(        ) S
(//## Make a copy of the argument and return) c n
(        ) p
(char) k
(* argument_copy = malloc\(strlen\(argument\) + 1\);) p n
() S 8 T () S
(if) K
(\(argument_copy == ) p
(NULL) K
(\){) p n
() S 8 T (    perror\(") S
(Error expanding argument) str
("\);) p n
() S 8 T (    globfree\(&pglob\);) N
() S 8 T (    ) S
(return) K
( ) p
(NULL) K
(;) p n
() S 8 T (}) N
() N
() S 8 T () S
(//## Free up memory) c n
(        globfree\(&pglob\);) p n
() N
(        strcpy\(argument_copy, argument\);) N
(        ) S
(return) K
( argument_copy;) p n
(    }) N
(}) N
(wildcard.c) (Page 3/3) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/wildcard.c) (16/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 17
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file alias.h) N
( * @brief Definition of alias functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#ifndef) K
( _ALIAS_INC) p n
(#define) K
( _ALIAS_INC) p n
() N
(#include) K
( <errno.h>) p n
(#include) K
( ") p
(types.h) str
(") p n
() N
(void) k
( add_alias\(kgenv* env, ) p
(char) k
(* name, ) p
(int) k
( cmd_argc, ) p
(char) k
(* cmd_argv[]\);) p n
() N
(bool remove_alias\(kgenv* env, ) S
(char) k
(* name\);) p n
() N
(aliasList* is_alias\(kgenv* env, ) S
(char) k
(* name\);) p n
() N
(#endif) K
( ) p
(//_ALIAS_INC) c n
(alias.h) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/alias.h) (17/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 18
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file builtins.h) N
( * @brief Declarations of builtin functions and constant members.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#ifndef) K
( _BUILTINS_INC) p n
(#define) K
( _BUILTINS_INC) p n
() N
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
(#include) K
( <errno.h>) p 24 T () S
(// for perror) c n
() p n
(#include) K
( <sys/types.h>  ) p
(// for readdir and opendir) c n
(#include) K
( <dirent.h>) p 24 T () S
(// for readdir and opendir) c n
() p n
(#include) K
( <signal.h>) p 24 T () S
(// for sigsend) c n
() p n
(#include) K
( ") p
(util.h) str
(") p n
(#include) K
( ") p
(types.h) str
(") p n
() N
(//-- Constants to define how many builtins we have) c n
(#ifdef) K
( DEBUG) p n
(#define) K
( NUM_BUILTINS 22) p 24 T () S 32 T () S
(// Total number of commands, including debug) c n
(#else) K n
(#define) S
( NUM_BUILTINS 16) p 24 T () S 32 T () S
(// Total number of commands, excluding debug) c n
(#endif) K
( ) p
(//DEBUG) c n
() p n
(short) k
( ) p
(int) k
( is_builtin\() p
(char) k
(* command\);) p n
() N
(void) k
( \(*BUILT_IN_FUNCS[NUM_BUILTINS]\)\(kgenv*, ) p
(int) k
(, ) p
(char) k
(**\);) p n
() N
(//------------------------------------------------------------------------------) c n
(//-- The following are functions that define each built in command.  Each) N
(//-- function takes a pointer to the shell's environment structure followed by) N
(//-- an argc and argv passed on from the shell. Functions are named such that a ) N
(//-- function bic_foo is run when the foo command is issued. ) N
(//------------------------------------------------------------------------------) N
(void) k
( bic_exit\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_which\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_where\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_cd\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_pwd\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_list\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_pid\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_kill\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_prompt\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_printenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_alias\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
(builtins.h) (Page 1/2) (Sep 30, 09 23:03) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() p n
(void) k
( bic_unalias\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_history\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_setenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_lsbuiltins\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( bic_copy\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(//------------------------------------------------------------------------------) c n
(//-- The following are functions associated with debugging commands and are) N
(//-- intended for development use only.  Compile with -DDEBUG for use.) N
(//------------------------------------------------------------------------------) N
(#ifdef) K
( DEBUG) p n
(void) k
( _db_tokenizer\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( _db_kgenv\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( _db_path\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( _db_history\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( _db_wc_contains\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
() N
(void) k
( _db_wc_expand\(kgenv* env, ) p
(int) k
( argc, ) p
(char) k
(* argv[]\);) p n
(#endif) K
( ) p
(//DEBUG) c n
() p n
(#endif) K
( ) p
(//_BUILTINS_INC) c n
(builtins.h) (Page 2/2) (Sep 30, 09 23:03) title
grestore
(Printed by Kevin Graney) rhead
(src/builtins.h) (18/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 19
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/* ) c n
(  get_path.h) N
(  Ben Miller) N
() N
(*/) N
(#ifndef) K
( _GET_PATH_INC) p n
(#define) K
( _GET_PATH_INC) p n
() N
(#include) K
( <stdio.h>) p n
(#include) K
( <unistd.h>) p n
(#include) K
( <stdlib.h>) p n
(#include) K
( <string.h>) p n
() N
(/* function prototype.  It returns a pointer to a linked list for the path) c n
(   elements. */) N
(struct) k
( pathelement *get_path\(\);) p n
() N
(struct) k
( pathelement) p n
({) N
(  ) S
(char) k
( *element;) p 24 T () S 32 T () S 40 T () S
(/* a dir in the path */) c n
(  ) p
(struct) k
( pathelement *next;) p 32 T () S 40 T () S
(/* pointer to next node */) c n
(};) p n
() N
() N
(#endif) K
( ) p
(//_GET_PATH_INC) c n
(get_path.h) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/get_path.h) (19/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1-2) 20
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file types.h) N
( * @brief Type declarations.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#ifndef) K
( _TYPES_INC) p n
(#define) K
( _TYPES_INC) p n
() N
(#include) K
( ") p
(get_path.h) str
(") p n
() N
(#define) K
( false 0     ) p
(///< C++ style false keyword) c n
(#define) K
( true  1     ) p
(///< C++ style true keyword) c n
(typedef) K
( ) p
(char) k
( bool;  ) p
(///< Fake boolean in C++ style) c n
() p n
() N
(//------------------------------------------------------------------------------) c n
(//-- Linked List Types) N
(//------------------------------------------------------------------------------) N
() p n
() N
(/** ) c n
( * @brief Struct to represent each node in the history linked list.) N
( */) N
(struct) k
( histelement {) p n
(    ) S
(int) k
() p 8 T (   num;) S 16 T () S 24 T () S 32 T () S
(///< Command number) c n
(    ) p
(char) k
(*  command;) p 24 T () S 32 T () S
(///< Command string) c n
(    ) p
(struct) k
( histelement* next;) p 32 T () S
(///< Pointer to next node \(previous command\)) c n
(};) p n
() N
(/** ) c n
( * @brief Typedef to refer to the history linked list. ) N
( */) N
(typedef) K
( ) p
(struct) k
( histelement histList;) p n
() N
(/** ) c n
( * @brief Structure to represent each node in the aliases linked list.  Take) N
( * note that the commands are stored in their unparsed condition to make) N
( * the code cleaner.) N
( */) N
(struct) k
( aliaselement {) p n
(    ) S
(char) k
(*  name;) p 24 T () S 32 T () S
(///< The name of the alias) c n
(    ) p
(char) k
(*  string;) p 24 T () S 32 T () S
(///< Command string alias refers to) c n
(    ) p
(struct) k
( aliaselement* next;) p 32 T () S
(///< Pointer to next node) c n
(};) p n
() N
(/**) c n
( * @brief Typedef to refer to the alias linked list.) N
( */) N
(typedef) K
( ) p
(struct) k
( aliaselement aliasList;) p n
() N
(/** ) c n
( * @brief A typedef is defined for the ::pathelement struct to be consistent) N
( * with the other linked lists.) N
( */) N
(typedef) K
( ) p
(struct) k
( pathelement pathList;) p n
() N
() N
(//------------------------------------------------------------------------------) c n
(//-- Environment Types) N
(types.h) (Page 1/2) (Sep 30, 09 22:51) title
/v 1 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(//------------------------------------------------------------------------------) c n
() p n
() N
(/** ) c n
( * @brief Global environment structure.) N
( *) N
( * The kgenv type will contain our current environment.  If this were being done) N
( * in C++ it would be a singleton class since we only ever create one variable ) N
( * of this type.  Basically, we're encapsulating all our would be global ) N
( * variables into a nice neat structure.) N
( */) N
(typedef) K
( ) p
(struct) k
( {) p n
(    ) S
(int) k
( uid;) p 16 T () S 24 T () S 32 T (        ) S
(///< User ID ) c n
(    ) p
(char) k
(* homedir;) p 24 T () S 32 T (        ) S
(///< Home directory path) c n
(    ) p
(struct) k
( passwd *pword_entry;) p 32 T () S 40 T () S
(///< Passwd entry info \(not needed?\)) c n
() p n
(    ) S
(char) k
(* cwd;) p 16 T (  ) S 24 T () S 32 T (        ) S
(///< Current working directory) c n
(    ) p
(char) k
(* pwd;    ) p 24 T () S 32 T (        ) S
(///< Prior working directory) c n
() p n
(    ) S
(char) k
(* prompt; ) p 24 T () S 32 T (        ) S
(///< Prompt prefix string) c n
(    pathList* path;) p 24 T () S 32 T (        ) S
(///< Path list pointer) c n
(    histList* hist;) p 24 T () S 32 T (        ) S
(///< History list pointer) c n
(    aliasList* aliases;) p 24 T () S 32 T (    ) S 40 T () S
(///< Alias list pointer) c n
(} kgenv;) p n
() N
() N
(//------------------------------------------------------------------------------) c n
(//-- Function Types) N
(//------------------------------------------------------------------------------) N
() p n
(/**) c n
( * @brief This is the generic function type for a built in function.  It's used ) N
( * to setup the function pointer arrays.) N
( */) N
(typedef) K
( ) p
(void) k
( \(*bicfunc\)\(kgenv*, ) p
(int) k
(, ) p
(char) k
(*\);) p n
() N
(#endif) K
( ) p
(//_TYPES_INC) c n
(types.h) (Page 2/2) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/types.h) (20/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 21
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file util.h) N
( * @brief Definitions of utility functions.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#ifndef) K
( _UTIL_INC) p n
(#define) K
( _UTIL_INC) p n
() N
(#include) K
( <stdio.h>) p n
(#include) K
( <stdlib.h>) p n
() N
(#include) K
( <sys/wait.h>) p 24 T () S
(// for waitpid and WEXITSTATUS) c n
(#include) K
( <sys/types.h>  ) p
(// for readdir and opendir) c n
(#include) K
( <dirent.h>) p 24 T () S
(// for readdir and opendir) c n
() p n
(#include) K
( <string.h>) p n
() N
(#include) K
( ") p
(types.h) str
(") p n
(#include) K
( ") p
(get_path.h) str
(") p n
() N
() N
(#define) K
(  O_VERBOSE_EXE) p 24 T () S
(// Enable the "Executing ..." messages) c n
() p n
(#define) K
( CWD_BUFFER_SIZE ) p 32 T (1024) N
(#define) K
( LINE_BUFFER_SIZE ) p 32 T (1024) N
(#define) K
( MAX_TOKENS_PER_LINE ) p 32 T (512) N
(#define) K
( HISTORY_SIZE ) p 24 T () S 32 T (1024) N
() N
() N
(/** ) c n
( * @brief The external environment variable list from the calling shell.) N
( */) N
(extern) K
( ) p
(char) k
(** environ;) p n
() N
(char) k
(* which\() p
(const) K
( ) p
(char) k
( *command, pathList* pathlist\);) p n
() N
(void) k
( add_to_history\() p
(char) k
(* command, kgenv* env\);) p n
() N
(int) k
( exec_cmd\() p
(char) k
(* cmd, ) p
(char) k
(** argv\);) p n
() N
(int) k
( process_command_in\() p
(char) k
(* line_in, kgenv* global_env, bool deref_alias\);) p n
() N
(int) k
( parse_line\() p
(int) k
(* argc, ) p
(char) k
(*** argv, ) p
(char) k
(* line\);) p n
() N
(void) k
( detokenize\() p
(char) k
(* str, ) p
(int) k
( length\);) p n
() N
(void) k
( set_environment\(kgenv* env, ) p
(char) k
(* name, ) p
(char) k
(* value\);) p n
() N
() N
(#endif) K
( ) p
(//_UTIL_INC) c n
(util.h) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/util.h) (21/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 22
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
(/*) c n
( * CISC361: Operating Systems \(Fall 2009\)) N
( * Instructor: Ben Miller) N
( *) N
( * Project 1) N
( * Kevin Graney) N
( */) N
() p n
(/** ) c n
( * @file wildcard.h) N
( * @brief Declarations of wildcard functions and constant members.) N
( * @author Kevin Graney) N
( * @version v0.1) N
( * @date 2009-08-02) N
( */) N
(#ifndef) K
( _WILDCARD_H) p n
(#define) K
( _WILDCARD_H) p n
() N
(#include) K
( <string.h>) p n
(#include) K
( <glob.h>) p n
(#include) K
( <errno.h>) p n
(#include) K
( ") p
(types.h) str
(") p n
() N
(#define) K
( MAX_WILDCARDS) p 24 T () S 32 T (512) N
(#define) K
( WILDCARD_CHARS ) p 24 T () S 32 T (") S
(*?) str
(") p n
() N
(bool contains_wildcards\() S
(char) k
(* line\);) p n
() N
(char) k
(* expand_wildcards\() p
(char) k
(* line\);) p n
() N
(char) k
(* expand_argument\() p
(char) k
(* argument\);) p n
() N
(#endif) K
( ) p
(//_WILDCARD_H) c n
(wildcard.h) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(src/wildcard.h) (22/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage
%%Page: (1) 23
%%BeginPageSetup
/pagesave save def
sh 0 translate 90 rotate
%%EndPageSetup
iso1dict begin
gsave
llx lly 12 add translate
/v 0 store
/x0 x v get 3.147420 add sx cw mul add store
/y0 y v get bfs th add sub store
x0 y0 moveto
() c n
(ARCH) p 8 T (:= $\(shell uname -m\)) N
(#CC) S 8 T (:= cc) N
(#CFLAGS) S 8 T (:= -g -DDEBUG -v -xcheck -m64 ) N
(CC) S 8 T (:= gcc) N
(CFLAGS) S 8 T (:= -g -DDEBUG -std=c99) N
(#OBJ) S 8 T (:= kgsh.o builtins.o get_path.o util.o alias.o wildcard.o) N
(OBJDIR) S 8 T (:= tgt-$\(ARCH\)) N
(SOURCES := $\(shell ls -t src) S
(/*.c | sed 's/src\\///g'\)) c n
(OBJS) S 8 T (:= $\(SOURCES:%.c=$\(OBJDIR\)/%.o\)) N
() N
(default: $\(OBJDIR\)/kgsh) N
() N
($\(OBJDIR\)/kgsh: $\(OBJS\) ) N
() S 8 T ($\(CC\) $\(CFLAGS\) $\(OBJS\) -o $@) N
() N
($\(OBJDIR\)/%.o: src/%.c) N
() S 8 T (mkdir -p $\(OBJDIR\)) N
() S 8 T ($\(CC\) $\(CFLAGS\) -c $<  -o $@) N
() N
(doc:) N
() S 8 T (doxygen) N
() S 8 T (make -f doc/latex/Makefile) N
() N
(clean: ) N
() S 8 T (rm -rf $\(OBJDIR\)) N
() S 8 T (rm -rf doc/*) N
() S 8 T () N
() N
(clean_all: clean) N
() S 8 T (rm -rf 'tgt-*') N
(Makefile) (Page 1/1) (Sep 30, 09 22:51) title
grestore
(Printed by Kevin Graney) rhead
(Makefile) (23/23) (Thursday October 01, 2009) footer
end % of iso1dict
pagesave restore
showpage

%%Trailer
end
%%EOF
